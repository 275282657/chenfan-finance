08-02  10:24:48.635  INFO  -||- [com.alibaba.nacos.client.config.impl.LocalConfigInfoProcessor] [main] => LOCAL_SNAPSHOT_PATH:C:\Users\2797\nacos\config
08-02  10:24:48.703  INFO  -||- [com.alibaba.nacos.client.config.impl.Limiter] [main] => limitTime:5.0
08-02  10:24:48.777  WARN  -||- [com.alibaba.cloud.nacos.client.NacosPropertySourceBuilder] [main] => Ignore the empty nacos configuration and get it based on dataId[finance] & group[TEST_GROUP]
08-02  10:24:48.780  WARN  -||- [com.alibaba.cloud.nacos.client.NacosPropertySourceBuilder] [main] => Ignore the empty nacos configuration and get it based on dataId[finance.yaml] & group[TEST_GROUP]
08-02  10:24:48.782  INFO  -||- [com.alibaba.nacos.client.config.utils.JVMUtil] [main] => isMultiInstance:false
08-02  10:24:48.791  INFO  -||- [org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration] [main] => Located property source: [BootstrapPropertySource {name='bootstrapProperties-finance-test.yaml,TEST_GROUP'}, BootstrapPropertySource {name='bootstrapProperties-finance.yaml,TEST_GROUP'}, BootstrapPropertySource {name='bootstrapProperties-finance,TEST_GROUP'}]
08-02  10:24:48.887  INFO  -||- [com.chenfan.finance.FinanceApplication] [main] => The following profiles are active: test
08-02  10:24:51.097  WARN  -||- [org.springframework.boot.actuate.endpoint.EndpointId] [main] => Endpoint ID 'nacos-config' contains invalid characters, please migrate to a valid format.
08-02  10:24:51.101  WARN  -||- [org.springframework.boot.actuate.endpoint.EndpointId] [main] => Endpoint ID 'nacos-discovery' contains invalid characters, please migrate to a valid format.
08-02  10:24:51.422  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Multiple Spring Data modules found, entering strict repository configuration mode!
08-02  10:24:51.422  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Bootstrapping Spring Data JPA repositories in DEFAULT mode.
08-02  10:24:51.476  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Finished Spring Data repository scanning in 46ms. Found 0 JPA repository interfaces.
08-02  10:24:51.486  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Multiple Spring Data modules found, entering strict repository configuration mode!
08-02  10:24:51.487  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
08-02  10:24:51.510  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Finished Spring Data repository scanning in 23ms. Found 0 MongoDB repository interfaces.
08-02  10:24:51.534  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Multiple Spring Data modules found, entering strict repository configuration mode!
08-02  10:24:51.535  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Bootstrapping Spring Data Redis repositories in DEFAULT mode.
08-02  10:24:51.568  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Finished Spring Data repository scanning in 24ms. Found 0 Redis repository interfaces.
08-02  10:24:51.636  WARN  -||- [org.springframework.boot.actuate.endpoint.EndpointId] [main] => Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
08-02  10:24:51.825  INFO  -||- [org.springframework.context.annotation.ConfigurationClassPostProcessor] [main] => Cannot enhance @Configuration bean definition 'com.chenfan.ccp.autoconfigure.GlobalMqMessageConfigure' since its singleton instance has been created too early. The typical cause is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor return type: Consider declaring such methods as 'static'.
08-02  10:24:51.926  INFO  -||- [org.springframework.cloud.context.scope.GenericScope] [main] => BeanFactory id=9c5c18c6-bf26-3693-9dd7-40930d53801d
08-02  10:24:51.958  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.finance.server.BaseInfoRemoteServer' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:24:51.959  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.finance.server.BaseRemoteServer' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:24:51.960  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.finance.server.McnRemoteServer' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:24:51.961  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.finance.server.PrivilegeUserServer' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:24:51.962  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.finance.server.PurchaseRemoteServer' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:24:51.962  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.finance.server.TaskRemoteServer' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:24:51.964  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.finance.server.VendorCenterServer' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:24:51.965  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.process.client.ProcessClient' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:24:51.966  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.code.generate.CodeGenerateClient' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:24:52.116  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:24:52.239  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$3ea90be5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:24:52.252  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:24:52.258  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:24:52.710  INFO  -||- [org.springframework.boot.web.embedded.tomcat.TomcatWebServer] [main] => Tomcat initialized with port(s): 8093 (http)
08-02  10:24:52.720  INFO  -||- [org.apache.catalina.core.StandardService] [main] => Starting service [Tomcat]
08-02  10:24:52.720  INFO  -||- [org.apache.catalina.core.StandardEngine] [main] => Starting Servlet engine: [Apache Tomcat/9.0.37]
08-02  10:24:52.851  INFO  -||- [org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]] [main] => Initializing Spring embedded WebApplicationContext
08-02  10:24:52.851  INFO  -||- [org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext] [main] => Root WebApplicationContext: initialization completed in 3931 ms
08-02  10:24:53.253  INFO  -||- [org.redisson.Version] [main] => Redisson 3.14.0
08-02  10:24:53.760  INFO  -||- [org.redisson.connection.pool.MasterPubSubConnectionPool] [redisson-netty-2-14] => 1 connections initialized for /10.228.81.233:6379
08-02  10:24:53.777  INFO  -||- [org.redisson.connection.pool.MasterConnectionPool] [redisson-netty-2-16] => 24 connections initialized for /10.228.81.233:6379
08-02  10:24:54.611  INFO  -||- [com.alibaba.druid.pool.DruidDataSource] [main] => {dataSource-1,defaultdb} inited
08-02  10:24:54.613  INFO  -||- [com.alibaba.druid.pool.DruidDataSource] [main] => {dataSource-2,tocdb} inited
08-02  10:24:54.613  INFO  -||- [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] [main] => dynamic-datasource - load a datasource named [defaultdb] success
08-02  10:24:54.613  INFO  -||- [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] [main] => dynamic-datasource - load a datasource named [tocdb] success
08-02  10:24:54.613  INFO  -||- [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] [main] => dynamic-datasource initial loaded [2] datasource,primary datasource named [defaultdb]
08-02  10:24:54.975  INFO  -||- [org.hibernate.jpa.internal.util.LogHelper] [main] => HHH000204: Processing PersistenceUnitInfo [name: default]
08-02  10:24:55.076  INFO  -||- [org.hibernate.Version] [main] => HHH000412: Hibernate ORM core version 5.4.18.Final
08-02  10:24:55.266  INFO  -||- [org.hibernate.annotations.common.Version] [main] => HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
08-02  10:24:55.395  INFO  -||- [org.hibernate.dialect.Dialect] [main] => HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
08-02  10:24:55.605  INFO  -||- [org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator] [main] => HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
08-02  10:24:55.614  INFO  -||- [org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean] [main] => Initialized JPA EntityManagerFactory for persistence unit 'default'
08-02  10:24:56.125  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.BrandU8Mapping".
08-02  10:24:56.165  WARN  -||- [com.baomidou.mybatisplus.core.injector.AbstractMethod] [main] => [com.chenfan.finance.dao.CfBankAndCashMapper.delete] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.Delete]
08-02  10:24:56.938  WARN  -||- [com.baomidou.mybatisplus.core.injector.AbstractMethod] [main] => [com.chenfan.finance.dao.RuleBillingDetailMapper.insert] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.Insert]
08-02  10:24:56.943  WARN  -||- [com.baomidou.mybatisplus.core.injector.AbstractMethod] [main] => [com.chenfan.finance.dao.RuleBillingDetailMapper.updateById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.UpdateById]
08-02  10:24:56.958  WARN  -||- [com.baomidou.mybatisplus.core.injector.AbstractMethod] [main] => [com.chenfan.finance.dao.RuleBillingHeaderMapper.insert] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.Insert]
08-02  10:24:56.962  WARN  -||- [com.baomidou.mybatisplus.core.injector.AbstractMethod] [main] => [com.chenfan.finance.dao.RuleBillingHeaderMapper.selectById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.SelectById]
08-02  10:24:56.985  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocAlipayOrigin".
08-02  10:24:57.000  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocApiRefund".
08-02  10:24:57.016  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocApiRefundOrder".
08-02  10:24:57.036  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocApiTrade".
08-02  10:24:57.060  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocApiTradeOrder".
08-02  10:24:57.119  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocSalesTrade".
08-02  10:24:57.144  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocSalesTradeOrder".
08-02  10:24:57.164  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocStockoutOrderDetail".
08-02  10:24:57.183  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocStockoutOrder".
08-02  10:24:57.560  WARN  -||- [org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration] [main] => spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
08-02  10:25:00.841  INFO  -||- [com.alibaba.nacos.client.naming] [main] => initializer namespace from System Property :null
08-02  10:25:00.842  INFO  -||- [com.alibaba.nacos.client.naming] [main] => initializer namespace from System Environment :null
08-02  10:25:00.843  INFO  -||- [com.alibaba.nacos.client.naming] [main] => initializer namespace from System Property :null
08-02  10:25:01.021  INFO  -||- [org.mongodb.driver.cluster] [main] => Cluster created with settings {hosts=[10.228.86.202:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
08-02  10:25:01.542  INFO  -||- [org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver] [main] => Exposing 0 endpoint(s) beneath base path '/actuator'
08-02  10:25:01.864  INFO  -||- [org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler] [main] => Initializing ExecutorService 'sheduleClearMemory'
08-02  10:25:01.878  INFO  -||- [com.chenfan.finance.config.XxlJobConfig] [main] => >>>>>>>>>>> xxl-job config init.
08-02  10:25:01.960  WARN  -||- [com.netflix.config.sources.URLConfigurationSource] [main] => No URLs will be polled as dynamic configuration sources.
08-02  10:25:01.961  INFO  -||- [com.netflix.config.sources.URLConfigurationSource] [main] => To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
08-02  10:25:01.979  WARN  -||- [com.netflix.config.sources.URLConfigurationSource] [main] => No URLs will be polled as dynamic configuration sources.
08-02  10:25:01.979  INFO  -||- [com.netflix.config.sources.URLConfigurationSource] [main] => To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
08-02  10:25:02.081  INFO  -||- [org.mongodb.driver.cluster] [cluster-ClusterId{value='6107577dc98dc533f3f9a328', description='null'}-10.228.86.202:27017] => Exception in monitor thread while connecting to server 10.228.86.202:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:70)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:128)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitorRunnable.run(DefaultServerMonitor.java:117)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:81)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:162)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:64)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:79)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:65)
	... 3 common frames omitted
08-02  10:25:03.602  INFO  -||- [com.xxl.job.core.executor.XxlJobExecutor] [main] => >>>>>>>>>>> xxl-job register jobhandler success, name:cfRdCalculateTaskJob, jobHandler:com.xxl.job.core.handler.impl.MethodJobHandler@5d93ad98[class com.chenfan.finance.job.FinanceJob#cfRdCalculateTaskJob]
08-02  10:25:03.602  INFO  -||- [com.xxl.job.core.executor.XxlJobExecutor] [main] => >>>>>>>>>>> xxl-job register jobhandler success, name:monitoringTask, jobHandler:com.xxl.job.core.handler.impl.MethodJobHandler@5407cc39[class com.chenfan.finance.job.FinanceJob#monitoringTask]
08-02  10:25:03.602  INFO  -||- [com.xxl.job.core.executor.XxlJobExecutor] [main] => >>>>>>>>>>> xxl-job register jobhandler success, name:tocDataMapping, jobHandler:com.xxl.job.core.handler.impl.MethodJobHandler@19941818[class com.chenfan.finance.job.FinanceJob#tocDataMapping]
08-02  10:25:04.029  INFO  -||- [com.xxl.job.core.server.EmbedServer] [Thread-92] => >>>>>>>>>>> xxl-job remoting server start success, nettype = class com.xxl.job.core.server.EmbedServer, port = 9999
08-02  10:25:05.615  INFO  -||- [org.springframework.boot.web.embedded.tomcat.TomcatWebServer] [main] => Tomcat started on port(s): 8093 (http) with context path ''
08-02  10:25:05.618  INFO  -||- [com.alibaba.nacos.client.naming] [main] => [BEAT] adding beat: {"cluster":"DEFAULT","ip":"10.228.84.57","metadata":{"preserved.register.source":"SPRING_CLOUD"},"period":5000,"port":8093,"scheduled":false,"serviceName":"CC_GROUP@@chenfan-cloud-finance","stopped":false,"weight":1.0} to beat map.
08-02  10:25:05.628  INFO  -||- [com.alibaba.nacos.client.naming] [main] => [REGISTER-SERVICE] test registering service CC_GROUP@@chenfan-cloud-finance with instance: {"clusterName":"DEFAULT","enabled":true,"ephemeral":true,"healthy":true,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000,"ip":"10.228.84.57","ipDeleteTimeout":30000,"metadata":{"preserved.register.source":"SPRING_CLOUD"},"port":8093,"weight":1.0}
08-02  10:25:05.635  INFO  -||- [com.alibaba.cloud.nacos.registry.NacosServiceRegistry] [main] => nacos registry, CC_GROUP chenfan-cloud-finance 10.228.84.57:8093 register finished
08-02  10:25:05.756  INFO  -||- [com.chenfan.finance.FinanceApplication] [main] => Started FinanceApplication in 18.645 seconds (JVM running for 21.645)
08-02  10:25:05.762  INFO  -||- [com.chenfan.finance.commons.base.FinanceProjectInitRunner] [main] => ====================== init start =======================
08-02  10:25:05.793  INFO  -||- [com.chenfan.finance.commons.base.FinanceProjectInitRunner] [main] =>  finance_project_key : 6cc5afbf-e5c8-45a9-a74a-f33c04c88be4 
08-02  10:25:05.793  INFO  -||- [com.chenfan.finance.commons.base.FinanceProjectInitRunner] [main] => ====================== init end =======================
08-02  10:25:05.796  INFO  -||- [com.alibaba.nacos.client.config.impl.ClientWorker] [main] => [fixed-10.228.81.30_3848-test] [subscribe] finance-test.yaml+TEST_GROUP+test
08-02  10:25:05.797  INFO  -||- [com.alibaba.nacos.client.config.impl.CacheData] [main] => [fixed-10.228.81.30_3848-test] [add-listener] ok, tenant=test, dataId=finance-test.yaml, group=TEST_GROUP, cnt=1
08-02  10:25:05.798  INFO  -||- [com.alibaba.nacos.client.config.impl.ClientWorker] [main] => [fixed-10.228.81.30_3848-test] [subscribe] finance+TEST_GROUP+test
08-02  10:25:05.798  INFO  -||- [com.alibaba.nacos.client.config.impl.CacheData] [main] => [fixed-10.228.81.30_3848-test] [add-listener] ok, tenant=test, dataId=finance, group=TEST_GROUP, cnt=1
08-02  10:25:05.798  INFO  -||- [com.alibaba.nacos.client.config.impl.ClientWorker] [main] => [fixed-10.228.81.30_3848-test] [subscribe] finance.yaml+TEST_GROUP+test
08-02  10:25:05.798  INFO  -||- [com.alibaba.nacos.client.config.impl.CacheData] [main] => [fixed-10.228.81.30_3848-test] [add-listener] ok, tenant=test, dataId=finance.yaml, group=TEST_GROUP, cnt=1
08-02  10:25:05.801  INFO  -||- [com.chenfan.ccp.util.start.ApplicationContextUtil] [main] => ======================================================================================
08-02  10:25:05.801  INFO  -||- [com.chenfan.ccp.util.start.ApplicationContextUtil] [main] =>                                                                                       
08-02  10:25:05.801  INFO  -||- [com.chenfan.ccp.util.start.ApplicationContextUtil] [main] => ................................服务启动成功,端口为8093................................
08-02  10:25:05.801  INFO  -||- [com.chenfan.ccp.util.start.ApplicationContextUtil] [main] => ................................日志保存路径为: ./log/................................
08-02  10:25:05.802  INFO  -||- [com.chenfan.ccp.util.start.ApplicationContextUtil] [main] =>                                                                                       
08-02  10:25:05.802  INFO  -||- [com.chenfan.ccp.util.start.ApplicationContextUtil] [main] => ======================================================================================
08-02  10:25:05.804  INFO  -||- [com.alibaba.nacos.client.config.impl.ClientWorker] [com.alibaba.nacos.client.Worker.longPolling.fixed-10.228.81.30_3848-test] => get changedGroupKeys:[]
08-02  10:25:06.071  INFO  -||- [org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]] [RMI TCP Connection(8)-10.228.84.57] => Initializing Spring DispatcherServlet 'dispatcherServlet'
08-02  10:25:06.071  INFO  -||- [org.springframework.web.servlet.DispatcherServlet] [RMI TCP Connection(8)-10.228.84.57] => Initializing Servlet 'dispatcherServlet'
08-02  10:25:06.109  INFO  -||- [org.springframework.web.servlet.DispatcherServlet] [RMI TCP Connection(8)-10.228.84.57] => Completed initialization in 38 ms
08-02  10:25:06.334  INFO  -||- [org.mongodb.driver.cluster] [RMI TCP Connection(9)-10.228.84.57] => Cluster description not yet available. Waiting for 30000 ms before timing out
08-02  10:25:31.549  INFO  -||- [org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler] [SpringContextShutdownHook] => Shutting down ExecutorService 'sheduleClearMemory'
08-02  10:25:31.558  INFO  -||- [com.alibaba.cloud.nacos.registry.NacosServiceRegistry] [SpringContextShutdownHook] => De-registering from Nacos Server now...
08-02  10:25:31.558  INFO  -||- [com.alibaba.nacos.client.naming] [SpringContextShutdownHook] => [BEAT] removing beat: CC_GROUP@@chenfan-cloud-finance:10.228.84.57:8093 from beat map.
08-02  10:25:31.558  INFO  -||- [com.alibaba.nacos.client.naming] [SpringContextShutdownHook] => [DEREGISTER-SERVICE] test deregistering service CC_GROUP@@chenfan-cloud-finance with instance: {"clusterName":"DEFAULT","enabled":true,"ephemeral":true,"healthy":true,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000,"instanceIdGenerator":"simple","ip":"10.228.84.57","ipDeleteTimeout":30000,"metadata":{},"port":8093,"weight":1.0}
08-02  10:25:31.561  INFO  -||- [com.alibaba.cloud.nacos.registry.NacosServiceRegistry] [SpringContextShutdownHook] => De-registration finished.
08-02  10:25:31.564  INFO  -||- [com.xxl.job.core.server.EmbedServer] [Thread-92] => >>>>>>>>>>> xxl-job remoting server stop.
08-02  10:25:31.572  INFO  -||- [com.xxl.job.core.thread.ExecutorRegistryThread] [xxl-job, executor ExecutorRegistryThread] => >>>>>>>>>>> xxl-job registry-remove success, registryParam:RegistryParam{registryGroup='EXECUTOR', registryKey='chenfan-finance', registryValue='http://10.228.84.57:9999/'}, registryResult:ReturnT [code=200, msg=null, content=null]
08-02  10:25:31.572  INFO  -||- [com.xxl.job.core.thread.ExecutorRegistryThread] [xxl-job, executor ExecutorRegistryThread] => >>>>>>>>>>> xxl-job, executor registry thread destory.
08-02  10:25:31.572  INFO  -||- [com.xxl.job.core.server.EmbedServer] [SpringContextShutdownHook] => >>>>>>>>>>> xxl-job remoting server destroy success.
08-02  10:25:31.573  INFO  -||- [com.xxl.job.core.thread.TriggerCallbackThread] [xxl-job, executor TriggerCallbackThread] => >>>>>>>>>>> xxl-job, executor callback thread destory.
08-02  10:25:31.573  INFO  -||- [com.xxl.job.core.thread.TriggerCallbackThread] [Thread-91] => >>>>>>>>>>> xxl-job, executor retry callback thread destory.
08-02  10:25:31.574  INFO  -||- [org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler] [SpringContextShutdownHook] => Shutting down ExecutorService 'sheduleClearMemory'
08-02  10:25:31.588  INFO  -||- [RocketmqRemoting] [NettyClientSelector_1] => closeChannel: close the connection to remote address[10.228.81.30:9876] result: true
08-02  10:25:31.589  INFO  -||- [RocketmqRemoting] [NettyClientSelector_1] => closeChannel: close the connection to remote address[10.228.81.30:10911] result: true
08-02  10:25:31.589  INFO  -||- [RocketmqRemoting] [NettyClientSelector_1] => closeChannel: close the connection to remote address[10.228.81.30:10909] result: true
08-02  10:25:31.594  INFO  -||- [RocketmqRemoting] [NettyClientSelector_1] => closeChannel: close the connection to remote address[10.228.81.30:9876] result: true
08-02  10:25:31.594  INFO  -||- [RocketmqRemoting] [NettyClientSelector_1] => closeChannel: close the connection to remote address[10.228.81.30:10911] result: true
08-02  10:25:31.594  INFO  -||- [RocketmqRemoting] [NettyClientSelector_1] => closeChannel: close the connection to remote address[10.228.81.30:10909] result: true
08-02  10:25:31.599  INFO  -||- [org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean] [SpringContextShutdownHook] => Closing JPA EntityManagerFactory for persistence unit 'default'
08-02  10:25:31.607  INFO  -||- [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] [SpringContextShutdownHook] => dynamic-datasource start closing ....
08-02  10:25:31.610  INFO  -||- [com.alibaba.druid.pool.DruidDataSource] [SpringContextShutdownHook] => {dataSource-1} closing ...
08-02  10:25:31.615  INFO  -||- [com.alibaba.druid.pool.DruidDataSource] [SpringContextShutdownHook] => {dataSource-1} closed
08-02  10:25:31.615  INFO  -||- [com.alibaba.druid.pool.DruidDataSource] [SpringContextShutdownHook] => {dataSource-2} closing ...
08-02  10:25:31.616  INFO  -||- [com.alibaba.druid.pool.DruidDataSource] [SpringContextShutdownHook] => {dataSource-2} closed
08-02  10:25:31.616  INFO  -||- [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] [SpringContextShutdownHook] => dynamic-datasource all closed success,bye
08-02  10:25:39.426  INFO  -||- [com.alibaba.nacos.client.config.impl.LocalConfigInfoProcessor] [main] => LOCAL_SNAPSHOT_PATH:C:\Users\2797\nacos\config
08-02  10:25:39.451  INFO  -||- [com.alibaba.nacos.client.config.impl.Limiter] [main] => limitTime:5.0
08-02  10:25:39.466  WARN  -||- [com.alibaba.cloud.nacos.client.NacosPropertySourceBuilder] [main] => Ignore the empty nacos configuration and get it based on dataId[finance] & group[TEST_GROUP]
08-02  10:25:39.469  WARN  -||- [com.alibaba.cloud.nacos.client.NacosPropertySourceBuilder] [main] => Ignore the empty nacos configuration and get it based on dataId[finance.yaml] & group[TEST_GROUP]
08-02  10:25:39.471  INFO  -||- [com.alibaba.nacos.client.config.utils.JVMUtil] [main] => isMultiInstance:false
08-02  10:25:39.480  INFO  -||- [org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration] [main] => Located property source: [BootstrapPropertySource {name='bootstrapProperties-finance-test.yaml,TEST_GROUP'}, BootstrapPropertySource {name='bootstrapProperties-finance.yaml,TEST_GROUP'}, BootstrapPropertySource {name='bootstrapProperties-finance,TEST_GROUP'}]
08-02  10:25:39.529  INFO  -||- [com.chenfan.finance.FinanceApplication] [main] => The following profiles are active: test
08-02  10:25:40.728  WARN  -||- [org.springframework.boot.actuate.endpoint.EndpointId] [main] => Endpoint ID 'nacos-config' contains invalid characters, please migrate to a valid format.
08-02  10:25:40.731  WARN  -||- [org.springframework.boot.actuate.endpoint.EndpointId] [main] => Endpoint ID 'nacos-discovery' contains invalid characters, please migrate to a valid format.
08-02  10:25:40.991  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Multiple Spring Data modules found, entering strict repository configuration mode!
08-02  10:25:40.991  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Bootstrapping Spring Data JPA repositories in DEFAULT mode.
08-02  10:25:41.044  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Finished Spring Data repository scanning in 46ms. Found 0 JPA repository interfaces.
08-02  10:25:41.050  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Multiple Spring Data modules found, entering strict repository configuration mode!
08-02  10:25:41.050  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
08-02  10:25:41.075  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Finished Spring Data repository scanning in 24ms. Found 0 MongoDB repository interfaces.
08-02  10:25:41.085  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Multiple Spring Data modules found, entering strict repository configuration mode!
08-02  10:25:41.086  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Bootstrapping Spring Data Redis repositories in DEFAULT mode.
08-02  10:25:41.118  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Finished Spring Data repository scanning in 24ms. Found 0 Redis repository interfaces.
08-02  10:25:41.180  WARN  -||- [org.springframework.boot.actuate.endpoint.EndpointId] [main] => Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
08-02  10:25:41.325  INFO  -||- [org.springframework.context.annotation.ConfigurationClassPostProcessor] [main] => Cannot enhance @Configuration bean definition 'com.chenfan.ccp.autoconfigure.GlobalMqMessageConfigure' since its singleton instance has been created too early. The typical cause is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor return type: Consider declaring such methods as 'static'.
08-02  10:25:41.405  INFO  -||- [org.springframework.cloud.context.scope.GenericScope] [main] => BeanFactory id=9c5c18c6-bf26-3693-9dd7-40930d53801d
08-02  10:25:41.444  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.finance.server.BaseInfoRemoteServer' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:25:41.444  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.finance.server.BaseRemoteServer' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:25:41.445  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.finance.server.McnRemoteServer' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:25:41.446  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.finance.server.PrivilegeUserServer' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:25:41.447  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.finance.server.PurchaseRemoteServer' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:25:41.448  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.finance.server.TaskRemoteServer' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:25:41.449  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.finance.server.VendorCenterServer' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:25:41.451  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.process.client.ProcessClient' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:25:41.452  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.code.generate.CodeGenerateClient' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:25:41.580  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:25:41.680  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$29ba63f2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:25:41.693  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:25:41.699  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:25:42.062  INFO  -||- [org.springframework.boot.web.embedded.tomcat.TomcatWebServer] [main] => Tomcat initialized with port(s): 8092 (http)
08-02  10:25:42.071  INFO  -||- [org.apache.catalina.core.StandardService] [main] => Starting service [Tomcat]
08-02  10:25:42.071  INFO  -||- [org.apache.catalina.core.StandardEngine] [main] => Starting Servlet engine: [Apache Tomcat/9.0.37]
08-02  10:25:42.213  INFO  -||- [org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]] [main] => Initializing Spring embedded WebApplicationContext
08-02  10:25:42.213  INFO  -||- [org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext] [main] => Root WebApplicationContext: initialization completed in 2660 ms
08-02  10:25:42.552  INFO  -||- [org.redisson.Version] [main] => Redisson 3.14.0
08-02  10:25:43.000  INFO  -||- [org.redisson.connection.pool.MasterPubSubConnectionPool] [redisson-netty-2-23] => 1 connections initialized for /10.228.81.233:6379
08-02  10:25:43.017  INFO  -||- [org.redisson.connection.pool.MasterConnectionPool] [redisson-netty-2-13] => 24 connections initialized for /10.228.81.233:6379
08-02  10:25:43.625  INFO  -||- [com.alibaba.druid.pool.DruidDataSource] [main] => {dataSource-1,defaultdb} inited
08-02  10:25:43.627  INFO  -||- [com.alibaba.druid.pool.DruidDataSource] [main] => {dataSource-2,tocdb} inited
08-02  10:25:43.627  INFO  -||- [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] [main] => dynamic-datasource - load a datasource named [defaultdb] success
08-02  10:25:43.628  INFO  -||- [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] [main] => dynamic-datasource - load a datasource named [tocdb] success
08-02  10:25:43.628  INFO  -||- [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] [main] => dynamic-datasource initial loaded [2] datasource,primary datasource named [defaultdb]
08-02  10:25:43.867  INFO  -||- [org.hibernate.jpa.internal.util.LogHelper] [main] => HHH000204: Processing PersistenceUnitInfo [name: default]
08-02  10:25:43.913  INFO  -||- [org.hibernate.Version] [main] => HHH000412: Hibernate ORM core version 5.4.18.Final
08-02  10:25:44.023  INFO  -||- [org.hibernate.annotations.common.Version] [main] => HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
08-02  10:25:44.137  INFO  -||- [org.hibernate.dialect.Dialect] [main] => HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
08-02  10:25:44.313  INFO  -||- [org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator] [main] => HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
08-02  10:25:44.322  INFO  -||- [org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean] [main] => Initialized JPA EntityManagerFactory for persistence unit 'default'
08-02  10:25:44.774  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.BrandU8Mapping".
08-02  10:25:44.809  WARN  -||- [com.baomidou.mybatisplus.core.injector.AbstractMethod] [main] => [com.chenfan.finance.dao.CfBankAndCashMapper.delete] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.Delete]
08-02  10:25:45.418  WARN  -||- [com.baomidou.mybatisplus.core.injector.AbstractMethod] [main] => [com.chenfan.finance.dao.RuleBillingDetailMapper.insert] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.Insert]
08-02  10:25:45.422  WARN  -||- [com.baomidou.mybatisplus.core.injector.AbstractMethod] [main] => [com.chenfan.finance.dao.RuleBillingDetailMapper.updateById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.UpdateById]
08-02  10:25:45.436  WARN  -||- [com.baomidou.mybatisplus.core.injector.AbstractMethod] [main] => [com.chenfan.finance.dao.RuleBillingHeaderMapper.insert] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.Insert]
08-02  10:25:45.441  WARN  -||- [com.baomidou.mybatisplus.core.injector.AbstractMethod] [main] => [com.chenfan.finance.dao.RuleBillingHeaderMapper.selectById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.SelectById]
08-02  10:25:45.456  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocAlipayOrigin".
08-02  10:25:45.479  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocApiRefund".
08-02  10:25:45.516  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocApiRefundOrder".
08-02  10:25:45.533  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocApiTrade".
08-02  10:25:45.557  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocApiTradeOrder".
08-02  10:25:45.596  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocSalesTrade".
08-02  10:25:45.621  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocSalesTradeOrder".
08-02  10:25:45.641  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocStockoutOrderDetail".
08-02  10:25:45.660  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocStockoutOrder".
08-02  10:25:46.011  WARN  -||- [org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration] [main] => spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
08-02  10:25:49.131  INFO  -||- [com.alibaba.nacos.client.naming] [main] => initializer namespace from System Property :null
08-02  10:25:49.132  INFO  -||- [com.alibaba.nacos.client.naming] [main] => initializer namespace from System Environment :null
08-02  10:25:49.133  INFO  -||- [com.alibaba.nacos.client.naming] [main] => initializer namespace from System Property :null
08-02  10:25:49.254  INFO  -||- [org.mongodb.driver.cluster] [main] => Cluster created with settings {hosts=[10.228.86.202:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
08-02  10:25:49.729  INFO  -||- [org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver] [main] => Exposing 0 endpoint(s) beneath base path '/actuator'
08-02  10:25:49.997  INFO  -||- [org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler] [main] => Initializing ExecutorService 'sheduleClearMemory'
08-02  10:25:50.011  INFO  -||- [com.chenfan.finance.config.XxlJobConfig] [main] => >>>>>>>>>>> xxl-job config init.
08-02  10:25:50.081  WARN  -||- [com.netflix.config.sources.URLConfigurationSource] [main] => No URLs will be polled as dynamic configuration sources.
08-02  10:25:50.082  INFO  -||- [com.netflix.config.sources.URLConfigurationSource] [main] => To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
08-02  10:25:50.086  WARN  -||- [com.netflix.config.sources.URLConfigurationSource] [main] => No URLs will be polled as dynamic configuration sources.
08-02  10:25:50.087  INFO  -||- [com.netflix.config.sources.URLConfigurationSource] [main] => To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
08-02  10:25:50.291  INFO  -||- [org.mongodb.driver.cluster] [cluster-ClusterId{value='610757ad17663a78ec33b5f0', description='null'}-10.228.86.202:27017] => Exception in monitor thread while connecting to server 10.228.86.202:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:70)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:128)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitorRunnable.run(DefaultServerMonitor.java:117)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:81)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:162)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:64)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:79)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:65)
	... 3 common frames omitted
08-02  10:25:51.624  INFO  -||- [com.xxl.job.core.executor.XxlJobExecutor] [main] => >>>>>>>>>>> xxl-job register jobhandler success, name:monitoringTask, jobHandler:com.xxl.job.core.handler.impl.MethodJobHandler@4e5b0a90[class com.chenfan.finance.job.FinanceJob#monitoringTask]
08-02  10:25:51.624  INFO  -||- [com.xxl.job.core.executor.XxlJobExecutor] [main] => >>>>>>>>>>> xxl-job register jobhandler success, name:tocDataMapping, jobHandler:com.xxl.job.core.handler.impl.MethodJobHandler@3b764ae5[class com.chenfan.finance.job.FinanceJob#tocDataMapping]
08-02  10:25:51.624  INFO  -||- [com.xxl.job.core.executor.XxlJobExecutor] [main] => >>>>>>>>>>> xxl-job register jobhandler success, name:cfRdCalculateTaskJob, jobHandler:com.xxl.job.core.handler.impl.MethodJobHandler@5f9b22c1[class com.chenfan.finance.job.FinanceJob#cfRdCalculateTaskJob]
08-02  10:25:52.008  INFO  -||- [com.xxl.job.core.server.EmbedServer] [Thread-85] => >>>>>>>>>>> xxl-job remoting server start success, nettype = class com.xxl.job.core.server.EmbedServer, port = 9999
08-02  10:25:53.610  INFO  -||- [org.springframework.boot.web.embedded.tomcat.TomcatWebServer] [main] => Tomcat started on port(s): 8092 (http) with context path ''
08-02  10:25:53.613  INFO  -||- [com.alibaba.nacos.client.naming] [main] => [BEAT] adding beat: {"cluster":"DEFAULT","ip":"10.228.84.57","metadata":{"preserved.register.source":"SPRING_CLOUD"},"period":5000,"port":8092,"scheduled":false,"serviceName":"CC_GROUP@@chenfan-cloud-finance","stopped":false,"weight":1.0} to beat map.
08-02  10:25:53.623  INFO  -||- [com.alibaba.nacos.client.naming] [main] => [REGISTER-SERVICE] test registering service CC_GROUP@@chenfan-cloud-finance with instance: {"clusterName":"DEFAULT","enabled":true,"ephemeral":true,"healthy":true,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000,"ip":"10.228.84.57","ipDeleteTimeout":30000,"metadata":{"preserved.register.source":"SPRING_CLOUD"},"port":8092,"weight":1.0}
08-02  10:25:53.629  INFO  -||- [com.alibaba.cloud.nacos.registry.NacosServiceRegistry] [main] => nacos registry, CC_GROUP chenfan-cloud-finance 10.228.84.57:8092 register finished
08-02  10:25:53.741  INFO  -||- [com.chenfan.finance.FinanceApplication] [main] => Started FinanceApplication in 15.43 seconds (JVM running for 17.073)
08-02  10:25:53.745  INFO  -||- [com.chenfan.finance.commons.base.FinanceProjectInitRunner] [main] => ====================== init start =======================
08-02  10:25:53.760  INFO  -||- [com.chenfan.finance.commons.base.FinanceProjectInitRunner] [main] =>  finance_project_key : fb66d943-657c-4806-a540-01a0fada36a8 
08-02  10:25:53.760  INFO  -||- [com.chenfan.finance.commons.base.FinanceProjectInitRunner] [main] => ====================== init end =======================
08-02  10:25:53.763  INFO  -||- [com.alibaba.nacos.client.config.impl.ClientWorker] [main] => [fixed-10.228.81.30_3848-test] [subscribe] finance-test.yaml+TEST_GROUP+test
08-02  10:25:53.764  INFO  -||- [com.alibaba.nacos.client.config.impl.CacheData] [main] => [fixed-10.228.81.30_3848-test] [add-listener] ok, tenant=test, dataId=finance-test.yaml, group=TEST_GROUP, cnt=1
08-02  10:25:53.764  INFO  -||- [com.alibaba.nacos.client.config.impl.ClientWorker] [main] => [fixed-10.228.81.30_3848-test] [subscribe] finance+TEST_GROUP+test
08-02  10:25:53.764  INFO  -||- [com.alibaba.nacos.client.config.impl.CacheData] [main] => [fixed-10.228.81.30_3848-test] [add-listener] ok, tenant=test, dataId=finance, group=TEST_GROUP, cnt=1
08-02  10:25:53.764  INFO  -||- [com.alibaba.nacos.client.config.impl.ClientWorker] [main] => [fixed-10.228.81.30_3848-test] [subscribe] finance.yaml+TEST_GROUP+test
08-02  10:25:53.764  INFO  -||- [com.alibaba.nacos.client.config.impl.CacheData] [main] => [fixed-10.228.81.30_3848-test] [add-listener] ok, tenant=test, dataId=finance.yaml, group=TEST_GROUP, cnt=1
08-02  10:25:53.766  INFO  -||- [com.chenfan.ccp.util.start.ApplicationContextUtil] [main] => ======================================================================================
08-02  10:25:53.766  INFO  -||- [com.chenfan.ccp.util.start.ApplicationContextUtil] [main] =>                                                                                       
08-02  10:25:53.767  INFO  -||- [com.chenfan.ccp.util.start.ApplicationContextUtil] [main] => ................................服务启动成功,端口为8092................................
08-02  10:25:53.767  INFO  -||- [com.chenfan.ccp.util.start.ApplicationContextUtil] [main] => ................................日志保存路径为: ./log/................................
08-02  10:25:53.767  INFO  -||- [com.chenfan.ccp.util.start.ApplicationContextUtil] [main] =>                                                                                       
08-02  10:25:53.767  INFO  -||- [com.chenfan.ccp.util.start.ApplicationContextUtil] [main] => ======================================================================================
08-02  10:25:53.773  INFO  -||- [com.alibaba.nacos.client.config.impl.ClientWorker] [com.alibaba.nacos.client.Worker.longPolling.fixed-10.228.81.30_3848-test] => get changedGroupKeys:[]
08-02  10:25:54.234  INFO  -||- [org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]] [RMI TCP Connection(5)-10.228.84.57] => Initializing Spring DispatcherServlet 'dispatcherServlet'
08-02  10:25:54.234  INFO  -||- [org.springframework.web.servlet.DispatcherServlet] [RMI TCP Connection(5)-10.228.84.57] => Initializing Servlet 'dispatcherServlet'
08-02  10:25:54.255  INFO  -||- [org.springframework.web.servlet.DispatcherServlet] [RMI TCP Connection(5)-10.228.84.57] => Completed initialization in 20 ms
08-02  10:25:54.482  INFO  -||- [org.mongodb.driver.cluster] [RMI TCP Connection(7)-10.228.84.57] => Cluster description not yet available. Waiting for 30000 ms before timing out
08-02  10:26:06.529  INFO  -|q2URvqgQUvMyNj05|- [HTTP_LOG] [http-nio-8092-exec-1] => ========================\\                      
08-02  10:26:06.529  INFO  -|q2URvqgQUvMyNj05|- [HTTP_LOG] [http-nio-8092-exec-1] =>                          \\                     
08-02  10:26:06.529  INFO  -|q2URvqgQUvMyNj05|- [HTTP_LOG] [http-nio-8092-exec-1] =>                           \\                    
08-02  10:26:06.533  INFO  -|q2URvqgQUvMyNj05|- [HTTP_LOG] [http-nio-8092-exec-1] => RequestURI:        /callback
08-02  10:26:08.123  INFO  -|q2URvqgQUvMyNj05|- [com.chenfan.finance.controller.common.CallbackController] [http-nio-8092-exec-1] => callback-> {    "approvalId": 1422017277095575552,    "serviceName": "chenfan-cloud-finance",    "param": "{\"json\": \"{\\\"clearId\\\":14867,\\\"clearStatus\\\":3,\\\"updateDate\\\":\\\"2021-08-02T10:11:53.302\\\"}\", \"className\": \"CfClearHeader\"}",    "approvalFlag": false,    "approvalFinished": true,    "remark": "123123123"}
08-02  10:26:23.516  INFO  -||- [com.alibaba.nacos.client.config.impl.ClientWorker] [com.alibaba.nacos.client.Worker.longPolling.fixed-10.228.81.30_3848-test] => get changedGroupKeys:[]
08-02  10:26:27.483  WARN  -||- [org.springframework.boot.actuate.mongo.MongoHealthIndicator] [RMI TCP Connection(7)-10.228.84.57] => MongoDB health check failed
org.springframework.dao.DataAccessResourceFailureException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=10.228.86.202:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused: connect}}]; nested exception is com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=10.228.86.202:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused: connect}}]
	at org.springframework.data.mongodb.core.MongoExceptionTranslator.translateExceptionIfPossible(MongoExceptionTranslator.java:90)
	at org.springframework.data.mongodb.core.MongoTemplate.potentiallyConvertRuntimeException(MongoTemplate.java:2902)
	at org.springframework.data.mongodb.core.MongoTemplate.execute(MongoTemplate.java:560)
	at org.springframework.data.mongodb.core.MongoTemplate.executeCommand(MongoTemplate.java:476)
	at org.springframework.boot.actuate.mongo.MongoHealthIndicator.doHealthCheck(MongoHealthIndicator.java:46)
	at org.springframework.boot.actuate.health.AbstractHealthIndicator.health(AbstractHealthIndicator.java:82)
	at org.springframework.boot.actuate.health.HealthIndicator.getHealth(HealthIndicator.java:37)
	at org.springframework.boot.actuate.health.HealthEndpoint.getHealth(HealthEndpoint.java:81)
	at org.springframework.boot.actuate.health.HealthEndpoint.getHealth(HealthEndpoint.java:38)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getContribution(HealthEndpointSupport.java:108)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getAggregateHealth(HealthEndpointSupport.java:119)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getContribution(HealthEndpointSupport.java:105)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getHealth(HealthEndpointSupport.java:83)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getHealth(HealthEndpointSupport.java:70)
	at org.springframework.boot.actuate.health.HealthEndpoint.health(HealthEndpoint.java:75)
	at org.springframework.boot.actuate.health.HealthEndpoint.health(HealthEndpoint.java:65)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:282)
	at org.springframework.boot.actuate.endpoint.invoke.reflect.ReflectiveOperationInvoker.invoke(ReflectiveOperationInvoker.java:77)
	at org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredOperation.invoke(AbstractDiscoveredOperation.java:60)
	at org.springframework.boot.actuate.endpoint.jmx.EndpointMBean.invoke(EndpointMBean.java:121)
	at org.springframework.boot.actuate.endpoint.jmx.EndpointMBean.invoke(EndpointMBean.java:96)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)
	at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1468)
	at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:76)
	at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1309)
	at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1401)
	at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:829)
	at sun.reflect.GeneratedMethodAccessor200.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:357)
	at sun.rmi.transport.Transport$1.run(Transport.java:200)
	at sun.rmi.transport.Transport$1.run(Transport.java:197)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196)
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:573)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:834)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:688)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:687)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=10.228.86.202:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused: connect}}]
	at com.mongodb.internal.connection.BaseCluster.getDescription(BaseCluster.java:182)
	at com.mongodb.internal.connection.SingleServerCluster.getDescription(SingleServerCluster.java:41)
	at com.mongodb.client.internal.MongoClientDelegate.getConnectedClusterDescription(MongoClientDelegate.java:145)
	at com.mongodb.client.internal.MongoClientDelegate.createClientSession(MongoClientDelegate.java:100)
	at com.mongodb.client.internal.MongoClientDelegate$DelegateOperationExecutor.getClientSession(MongoClientDelegate.java:277)
	at com.mongodb.client.internal.MongoClientDelegate$DelegateOperationExecutor.execute(MongoClientDelegate.java:181)
	at com.mongodb.client.internal.MongoDatabaseImpl.executeCommand(MongoDatabaseImpl.java:186)
	at com.mongodb.client.internal.MongoDatabaseImpl.runCommand(MongoDatabaseImpl.java:155)
	at com.mongodb.client.internal.MongoDatabaseImpl.runCommand(MongoDatabaseImpl.java:150)
	at org.springframework.data.mongodb.core.MongoTemplate.lambda$executeCommand$2(MongoTemplate.java:476)
	at org.springframework.data.mongodb.core.MongoTemplate.execute(MongoTemplate.java:558)
	... 45 common frames omitted
08-02  10:26:28.876  DEBUG -|q2URvqgQUvMyNj05|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-1] => ==>  Preparing: SELECT clear_id,clear_no,invoice_no,clear_method,clear_status,job_type,actual_ar_ap_date,brand_id,balance,fi_user,bank,bank_no,bank_amount,check_no,currency_code,exchange_rate,clear_date,clear_by,clear_debit,clear_credit,clear_type,clear_balance,now_clear_debit,now_clear_credit,now_clear_type,now_clear_balance,last_balance_debit,last_balance_credit,last_balance_type,last_balance_balance,now_balance_debit,now_balance_credit,now_balance_type,now_balance_balance,remark,company_id,create_by,create_name,create_date,update_by,update_name,update_date,record_seq_no,receipt_screenshot,collection_and_pay_remark,reject_reason FROM cf_clear_header WHERE clear_id=?
08-02  10:26:29.459  DEBUG -|q2URvqgQUvMyNj05|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-1] => ==> Parameters: 14867(Long)
08-02  10:26:29.650  DEBUG -|q2URvqgQUvMyNj05|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-1] => <==      Total: 1
08-02  10:26:29.655  INFO  -|q2URvqgQUvMyNj05|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-1] =>     [sql]: ==> select * from cf_clear_header where clear_id=14867  <==   |   [time]: ==> 321 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfClearHeader(clear ...  <==
08-02  10:26:39.032  ERROR -|q2URvqgQUvMyNj05|- [com.chenfan.common.exception.GlobalDefaultExceptionHandler] [http-nio-8092-exec-1] => [[SystemState, BUSINESS_ERROR, 状态错误，非预期的状态]] {}: {}
com.chenfan.common.exception.BusinessException: 状态错误，非预期的状态
	at com.chenfan.finance.exception.FinanceBizState.<clinit>(FinanceBizState.java:18)
	at com.chenfan.finance.service.common.state.AbstractStateService.getInvoiceStatusEnumFromList(AbstractStateService.java:109)
	at com.chenfan.finance.service.common.state.AbstractStateService.getInvoiceStatusEnumFromList(AbstractStateService.java:64)
	at com.chenfan.finance.service.common.state.ClearStateService.judgeStatus(ClearStateService.java:135)
	at com.chenfan.finance.service.common.state.ClearStateService.updateState(ClearStateService.java:95)
	at com.chenfan.finance.service.common.state.ClearStateService$$FastClassBySpringCGLIB$$c3d03714.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.chenfan.finance.service.common.state.ClearStateService$$EnhancerBySpringCGLIB$$44c733da.updateState(<generated>)
	at com.chenfan.finance.service.common.McnClearService.updateState(McnClearService.java:272)
	at com.chenfan.finance.service.common.McnClearService$$FastClassBySpringCGLIB$$3afda4c0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)
	at com.chenfan.finance.service.common.McnClearService$$EnhancerBySpringCGLIB$$741b685e.updateState(<generated>)
	at com.chenfan.finance.controller.common.CallbackController.callback(CallbackController.java:148)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.chenfan.ccp.plug.log.config.NativeServlerFilter$CustomFilter.traceHttp(NativeServlerFilter.java:146)
	at com.chenfan.ccp.plug.log.config.NativeServlerFilter$CustomFilter.doFilter(NativeServlerFilter.java:202)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.session.web.http.SessionRepositoryFilter.doFilterInternal(SessionRepositoryFilter.java:141)
	at org.springframework.session.web.http.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:82)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
08-02  10:26:39.072  INFO  -|q2URvqgQUvMyNj05|- [HTTP_LOG] [http-nio-8092-exec-1] => RequestParams:     3112366804500={    "approvalId": 1422017277095575552,    "serviceName": "chenfan-cloud-finance",    "param": "{\"json\": \"{\\\"clearId\\\":14867,\\\"clearStatus\\\":3,\\\"updateDate\\\":\\\"2021-08-02T10:11:53.302\\\"}\", \"className\": \"CfClearHeader\"}",    "approvalFlag": false,    "approvalFinished": true,    "remark": "123123123"}
08-02  10:26:39.072  INFO  -|q2URvqgQUvMyNj05|- [HTTP_LOG] [http-nio-8092-exec-1] => Total:             32543ms
08-02  10:26:39.072  INFO  -|q2URvqgQUvMyNj05|- [HTTP_LOG] [http-nio-8092-exec-1] =>                           //                      
08-02  10:26:39.072  INFO  -|q2URvqgQUvMyNj05|- [HTTP_LOG] [http-nio-8092-exec-1] =>                          //                       
08-02  10:26:39.073  INFO  -|q2URvqgQUvMyNj05|- [HTTP_LOG] [http-nio-8092-exec-1] => ========================//                        



08-02  10:26:56.416  INFO  -|q2URvqgQUvMyNjpO|- [HTTP_LOG] [http-nio-8092-exec-2] => ========================\\                      
08-02  10:26:56.417  INFO  -|q2URvqgQUvMyNjpO|- [HTTP_LOG] [http-nio-8092-exec-2] =>                          \\                     
08-02  10:26:56.417  INFO  -|q2URvqgQUvMyNjpO|- [HTTP_LOG] [http-nio-8092-exec-2] =>                           \\                    
08-02  10:26:56.417  INFO  -|q2URvqgQUvMyNjpO|- [HTTP_LOG] [http-nio-8092-exec-2] => RequestURI:        /callback
08-02  10:26:59.361  INFO  -||- [com.alibaba.nacos.client.config.impl.ClientWorker] [com.alibaba.nacos.client.Worker.longPolling.fixed-10.228.81.30_3848-test] => get changedGroupKeys:[]
08-02  10:26:59.361  INFO  -|q2URvqgQUvMyNjpO|- [com.chenfan.finance.controller.common.CallbackController] [http-nio-8092-exec-2] => callback-> {    "approvalId": 1422017277095575552,    "serviceName": "chenfan-cloud-finance",    "param": "{\"json\": \"{\\\"clearId\\\":14867,\\\"clearStatus\\\":3,\\\"updateDate\\\":\\\"2021-08-02T10:11:53.302\\\"}\", \"className\": \"CfClearHeader\"}",    "approvalFlag": false,    "approvalFinished": true,    "remark": "123123123"}
08-02  10:27:01.390  DEBUG -|q2URvqgQUvMyNjpO|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-2] => ==>  Preparing: SELECT clear_id,clear_no,invoice_no,clear_method,clear_status,job_type,actual_ar_ap_date,brand_id,balance,fi_user,bank,bank_no,bank_amount,check_no,currency_code,exchange_rate,clear_date,clear_by,clear_debit,clear_credit,clear_type,clear_balance,now_clear_debit,now_clear_credit,now_clear_type,now_clear_balance,last_balance_debit,last_balance_credit,last_balance_type,last_balance_balance,now_balance_debit,now_balance_credit,now_balance_type,now_balance_balance,remark,company_id,create_by,create_name,create_date,update_by,update_name,update_date,record_seq_no,receipt_screenshot,collection_and_pay_remark,reject_reason FROM cf_clear_header WHERE clear_id=?
08-02  10:27:01.471  DEBUG -|q2URvqgQUvMyNjpO|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-2] => ==> Parameters: 14867(Long)
08-02  10:27:01.502  DEBUG -|q2URvqgQUvMyNjpO|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-2] => <==      Total: 1
08-02  10:27:01.506  INFO  -|q2URvqgQUvMyNjpO|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-2] =>     [sql]: ==> select * from cf_clear_header where clear_id=14867  <==   |   [time]: ==> 110 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfClearHeader(clear ...  <==
08-02  10:27:40.755  INFO  -||- [com.alibaba.nacos.client.config.impl.ClientWorker] [com.alibaba.nacos.client.Worker.longPolling.fixed-10.228.81.30_3848-test] => get changedGroupKeys:[]
08-02  10:27:40.762  INFO  -||- [com.alibaba.nacos.client.naming] [com.alibaba.nacos.naming.beat.sender] => [REGISTER-SERVICE] test registering service CC_GROUP@@chenfan-cloud-finance with instance: {"clusterName":"DEFAULT","enabled":true,"ephemeral":true,"healthy":true,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000,"ip":"10.228.84.57","ipDeleteTimeout":30000,"metadata":{"preserved.register.source":"SPRING_CLOUD"},"port":8092,"serviceName":"CC_GROUP@@chenfan-cloud-finance","weight":1.0}
08-02  10:27:40.764  ERROR -|q2URvqgQUvMyNjpO|- [com.chenfan.common.exception.GlobalDefaultExceptionHandler] [http-nio-8092-exec-2] => [[SystemState, BUSINESS_ERROR, 状态错误，非预期的状态]] {}: {}
com.chenfan.common.exception.BusinessException: 状态错误，非预期的状态
	at com.chenfan.finance.exception.FinanceBizState.<clinit>(FinanceBizState.java:18)
	at com.chenfan.finance.service.common.state.AbstractStateService.getInvoiceStatusEnumFromList(AbstractStateService.java:109)
	at com.chenfan.finance.service.common.state.AbstractStateService.getInvoiceStatusEnumFromList(AbstractStateService.java:64)
	at com.chenfan.finance.service.common.state.ClearStateService.judgeStatus(ClearStateService.java:135)
	at com.chenfan.finance.service.common.state.ClearStateService.updateState(ClearStateService.java:95)
	at com.chenfan.finance.service.common.state.ClearStateService$$FastClassBySpringCGLIB$$c3d03714.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.chenfan.finance.service.common.state.ClearStateService$$EnhancerBySpringCGLIB$$44c733da.updateState(<generated>)
	at com.chenfan.finance.service.common.McnClearService.updateState(McnClearService.java:272)
	at com.chenfan.finance.service.common.McnClearService$$FastClassBySpringCGLIB$$3afda4c0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)
	at com.chenfan.finance.service.common.McnClearService$$EnhancerBySpringCGLIB$$741b685e.updateState(<generated>)
	at com.chenfan.finance.controller.common.CallbackController.callback(CallbackController.java:148)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.chenfan.ccp.plug.log.config.NativeServlerFilter$CustomFilter.traceHttp(NativeServlerFilter.java:146)
	at com.chenfan.ccp.plug.log.config.NativeServlerFilter$CustomFilter.doFilter(NativeServlerFilter.java:202)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.session.web.http.SessionRepositoryFilter.doFilterInternal(SessionRepositoryFilter.java:141)
	at org.springframework.session.web.http.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:82)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
08-02  10:27:40.767  INFO  -|q2URvqgQUvMyNjpO|- [HTTP_LOG] [http-nio-8092-exec-2] => RequestParams:     3162109116900={    "approvalId": 1422017277095575552,    "serviceName": "chenfan-cloud-finance",    "param": "{\"json\": \"{\\\"clearId\\\":14867,\\\"clearStatus\\\":3,\\\"updateDate\\\":\\\"2021-08-02T10:11:53.302\\\"}\", \"className\": \"CfClearHeader\"}",    "approvalFlag": false,    "approvalFinished": true,    "remark": "123123123"}
08-02  10:27:40.767  INFO  -|q2URvqgQUvMyNjpO|- [HTTP_LOG] [http-nio-8092-exec-2] => Total:             44351ms
08-02  10:27:40.767  INFO  -|q2URvqgQUvMyNjpO|- [HTTP_LOG] [http-nio-8092-exec-2] =>                           //                      
08-02  10:27:40.768  INFO  -|q2URvqgQUvMyNjpO|- [HTTP_LOG] [http-nio-8092-exec-2] =>                          //                       
08-02  10:27:40.768  INFO  -|q2URvqgQUvMyNjpO|- [HTTP_LOG] [http-nio-8092-exec-2] => ========================//                        



08-02  10:28:10.264  INFO  -||- [com.alibaba.nacos.client.config.impl.ClientWorker] [com.alibaba.nacos.client.Worker.longPolling.fixed-10.228.81.30_3848-test] => get changedGroupKeys:[]
08-02  10:28:21.807  INFO  -|q2URvqgQUvMyNjNQ|- [HTTP_LOG] [http-nio-8092-exec-3] => ========================\\                      
08-02  10:28:21.808  INFO  -|q2URvqgQUvMyNjNQ|- [HTTP_LOG] [http-nio-8092-exec-3] =>                          \\                     
08-02  10:28:21.808  INFO  -|q2URvqgQUvMyNjNQ|- [HTTP_LOG] [http-nio-8092-exec-3] =>                           \\                    
08-02  10:28:21.808  INFO  -|q2URvqgQUvMyNjNQ|- [HTTP_LOG] [http-nio-8092-exec-3] => RequestURI:        /callback
08-02  10:28:23.334  INFO  -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.controller.common.CallbackController] [http-nio-8092-exec-3] => callback-> {    "approvalId": 1422017277095575552,    "serviceName": "chenfan-cloud-finance",    "param": "{\"json\": \"{\\\"clearId\\\":14867,\\\"clearStatus\\\":3,\\\"updateDate\\\":\\\"2021-08-02T10:11:53.302\\\"}\", \"className\": \"CfClearHeader\"}",    "approvalFlag": false,    "approvalFinished": true,    "remark": "123123123"}
08-02  10:28:24.875  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-3] => ==>  Preparing: SELECT clear_id,clear_no,invoice_no,clear_method,clear_status,job_type,actual_ar_ap_date,brand_id,balance,fi_user,bank,bank_no,bank_amount,check_no,currency_code,exchange_rate,clear_date,clear_by,clear_debit,clear_credit,clear_type,clear_balance,now_clear_debit,now_clear_credit,now_clear_type,now_clear_balance,last_balance_debit,last_balance_credit,last_balance_type,last_balance_balance,now_balance_debit,now_balance_credit,now_balance_type,now_balance_balance,remark,company_id,create_by,create_name,create_date,update_by,update_name,update_date,record_seq_no,receipt_screenshot,collection_and_pay_remark,reject_reason FROM cf_clear_header WHERE clear_id=?
08-02  10:28:24.957  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-3] => ==> Parameters: 14867(Long)
08-02  10:28:24.993  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-3] => <==      Total: 1
08-02  10:28:24.997  INFO  -|q2URvqgQUvMyNjNQ|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-3] =>     [sql]: ==> select * from cf_clear_header where clear_id=14867  <==   |   [time]: ==> 117 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfClearHeader(clear ...  <==
08-02  10:28:44.389  INFO  -||- [com.alibaba.nacos.client.config.impl.ClientWorker] [com.alibaba.nacos.client.Worker.longPolling.fixed-10.228.81.30_3848-test] => get changedGroupKeys:[]
08-02  10:28:44.459  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfClearDetailMapper.selectList] [http-nio-8092-exec-3] => ==>  Preparing: SELECT clear_detail_id,clear_id,invoice_no,invoice_title,balance,balance_name,invoice_title_name,charge_type,charge_source_type,source_currency_code,source_exchange_rate,charge_id,arap_type,clear_debit,clear_credit,cleared_amount,last_balance,now_balance,actual_clear_amount,charge_source_code,remark,currency_code,exchange_rate FROM cf_clear_detail WHERE (clear_id = ?)
08-02  10:28:44.463  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfClearDetailMapper.selectList] [http-nio-8092-exec-3] => ==> Parameters: 14867(Long)
08-02  10:28:44.471  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfClearDetailMapper.selectList] [http-nio-8092-exec-3] => <==      Total: 1
08-02  10:28:44.472  INFO  -|q2URvqgQUvMyNjNQ|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-3] =>     [sql]: ==> select * from cf_clear_detail where (clear_id = 14867) <==   |   [time]: ==> 11 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfClearDetail(clear ...  <==
08-02  10:28:44.474  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfChargeCommonMapper.selectById] [http-nio-8092-exec-3] => ==>  Preparing: SELECT charge_id,charge_code,charge_source_type,charge_type,check_status,arap_type,split_type,charge_source_code,charge_source_detail,currency_code,exchange_rate,tax_rate,charge_unit,charge_qty,price_pp,amount_pp,balance,finance_entity,charge_month_belong_to,tax_invoice_no,tax_invoice_date,invoice_no,invoice_title,invoice_title_name,invoice_date,clear_no,actual_amount,actual_date,actual_history_date,remark,charge_date,bill_source_type,invoice_entrance_date,sett_template,create_by,create_name,create_date,company_id,tenant_id,update_by,update_name,update_date,parent_id,split_id,invoice_form,invoice_type,invoice_content,invoice_remark,brand_id,overage FROM cf_charge_common WHERE charge_id=?
08-02  10:28:44.477  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfChargeCommonMapper.selectById] [http-nio-8092-exec-3] => ==> Parameters: 9616(Long)
08-02  10:28:44.481  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfChargeCommonMapper.selectById] [http-nio-8092-exec-3] => <==      Total: 1
08-02  10:28:44.482  INFO  -|q2URvqgQUvMyNjNQ|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-3] =>     [sql]: ==> select * from cf_charge_common where charge_id=9616  <==   |   [time]: ==> 6 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfChargeCommon(char ...  <==
08-02  10:28:44.504  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfChargeCommonMapper.updateById] [http-nio-8092-exec-3] => ==>  Preparing: UPDATE cf_charge_common SET charge_code=?, charge_source_type=?, charge_type=?, check_status=?, arap_type=?, split_type=?, charge_source_code=?, charge_source_detail=?, currency_code=?, exchange_rate=?, tax_rate=?, charge_qty=?, price_pp=?, amount_pp=?, balance=?, finance_entity=?, tax_invoice_no=?, tax_invoice_date=?, invoice_no=?, invoice_title=?, invoice_title_name=?, invoice_date=?, clear_no=?, actual_amount=?, actual_date=?, bill_source_type=?, invoice_entrance_date=?, create_by=?, create_name=?, create_date=?, company_id=?, tenant_id=?, update_by=?, update_name=?, update_date=?, parent_id=?, split_id=?, invoice_form=?, invoice_type=?, invoice_content=?, invoice_remark=?, brand_id=?, overage=? WHERE charge_id=?
08-02  10:28:44.515  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfChargeCommonMapper.updateById] [http-nio-8092-exec-3] => ==> Parameters: CRG210727000012(String), 3(Integer), 3(Integer), 1(Integer), AR(String), 1(Integer), SR2107270015(String), SR2107270015(String), RMB(String), 1.0000(BigDecimal), 0.00(BigDecimal), 1(Integer), 600.0000(BigDecimal), 600.00(BigDecimal), 三只松鼠(String), 宁波宸帆网络技术有限公司(String), 123(String), 2021-07-27T00:00(LocalDateTime), FP202107270016(String), 三只松鼠(String), 三只松鼠(String), 2021-07-27T15:39:06(LocalDateTime), (String), 0.0000(BigDecimal), 2021-08-02T10:05:55(LocalDateTime), 4(Integer), 2021-07-27T15:28:33(LocalDateTime), 1355109855085465602(Long), 徐苡芮(String), 2021-07-27T15:29:08(LocalDateTime), 4(Long), 1(Long), 1347390028526915585(Long), 海洋(String), 2021-07-27T15:29:08(LocalDateTime), 9613(Long), 3(Integer), 1(Integer), (String), (String), (String), 106(Long), 600.0000(BigDecimal), 9616(Long)
08-02  10:28:44.517  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfChargeCommonMapper.updateById] [http-nio-8092-exec-3] => <==    Updates: 1
08-02  10:28:44.517  INFO  -|q2URvqgQUvMyNjNQ|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-3] =>     [sql]: ==> UPDATE cf_charge_common SET charge_code='CRG210727000012', charge_source_type=3, charge_type=3, check_status=1, arap_type='AR', split_type=1, charge_source_code='SR2107270015', charge_source_detail='SR2107270015', currency_code='RMB', exchange_rate=1.0000, tax_rate=0.00, charge_qty=1, price_pp=600.0000, amount_pp=600.00, balance='三只松鼠', finance_entity='宁波宸帆网络技术有限公司', tax_invoice_no='123', tax_invoice_date='2021-07-27 00:00:00.0', invoice_no='FP202107270016', invoice_title='三只松鼠', invoice_title_name='三只松鼠', invoice_date='2021-07-27 15:39:06.0', clear_no='', actual_amount=0.0000, actual_date='2021-08-02 10:05:55.0', bill_source_type=4, invoice_entrance_date='2021-07-27 15:28:33.0', create_by=1355109855085465602, create_name='徐苡芮', create_date='2021-07-27 15:29:08.0', company_id=4, tenant_id=1, update_by=1347390028526915585, update_name='海洋', update_date='2021-07-27 15:29:08.0', parent_id=9613, split_id=3, invoice_form=1, invoice_type='', invoice_content='', invoice_remark='', brand_id=106, overage=600.0000 WHERE charge_id=9616 <==   |   [time]: ==> 4 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:28:44.522  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfClearDetailMapper.updateById] [http-nio-8092-exec-3] => ==>  Preparing: UPDATE cf_clear_detail SET clear_id=?, invoice_no=?, invoice_title=?, balance=?, balance_name=?, invoice_title_name=?, charge_type=?, charge_source_type=?, source_currency_code=?, source_exchange_rate=?, charge_id=?, arap_type=?, clear_debit=?, clear_credit=?, cleared_amount=?, last_balance=?, now_balance=?, actual_clear_amount=?, charge_source_code=?, remark=?, currency_code=?, exchange_rate=? WHERE clear_detail_id=?
08-02  10:28:44.525  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfClearDetailMapper.updateById] [http-nio-8092-exec-3] => ==> Parameters: 14867(Long), 123(String), 三只松鼠(String), 三只松鼠(String), (String), 三只松鼠(String), 3(String), 3(Integer), (String), 0.0000(BigDecimal), 9616(Long), AR(String), 600.0000(BigDecimal), 0.0000(BigDecimal), 600.0000(BigDecimal), 600.0000(BigDecimal), 0(BigDecimal), 1.0000(BigDecimal), SR2107270015(String), (String), RMB(String), 1.0000(BigDecimal), 36661(Long)
08-02  10:28:44.527  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfClearDetailMapper.updateById] [http-nio-8092-exec-3] => <==    Updates: 1
08-02  10:28:44.527  INFO  -|q2URvqgQUvMyNjNQ|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-3] =>     [sql]: ==> UPDATE cf_clear_detail SET clear_id=14867, invoice_no='123', invoice_title='三只松鼠', balance='三只松鼠', balance_name='', invoice_title_name='三只松鼠', charge_type='3', charge_source_type=3, source_currency_code='', source_exchange_rate=0.0000, charge_id=9616, arap_type='AR', clear_debit=600.0000, clear_credit=0.0000, cleared_amount=600.0000, last_balance=600.0000, now_balance=0, actual_clear_amount=1.0000, charge_source_code='SR2107270015', remark='', currency_code='RMB', exchange_rate=1.0000 WHERE clear_detail_id=36661 <==   |   [time]: ==> 4 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:28:44.529  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfClearBankDetailMapper.selectList] [http-nio-8092-exec-3] => ==>  Preparing: SELECT clear_bank_detail_id,clear_id,bank_and_cash_id,record_seq_no,record_type,amount,balance_balance,last_balance,arap_type,arap_date,payment_branch,remark,create_date FROM cf_clear_bank_detail WHERE (clear_id = ?)
08-02  10:28:44.533  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfClearBankDetailMapper.selectList] [http-nio-8092-exec-3] => ==> Parameters: 14867(Long)
08-02  10:28:44.535  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfClearBankDetailMapper.selectList] [http-nio-8092-exec-3] => <==      Total: 1
08-02  10:28:44.537  INFO  -|q2URvqgQUvMyNjNQ|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-3] =>     [sql]: ==> select * from cf_clear_bank_detail where (clear_id = 14867) <==   |   [time]: ==> 5 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfClearBankDetail(c ...  <==
08-02  10:28:44.539  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfClearBankDetailMapper.delete] [http-nio-8092-exec-3] => ==>  Preparing: DELETE FROM cf_clear_bank_detail WHERE (clear_id = ?)
08-02  10:28:44.543  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfClearBankDetailMapper.delete] [http-nio-8092-exec-3] => ==> Parameters: 14867(Long)
08-02  10:28:44.545  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfClearBankDetailMapper.delete] [http-nio-8092-exec-3] => <==    Updates: 1
08-02  10:28:44.545  INFO  -|q2URvqgQUvMyNjNQ|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-3] =>     [sql]: ==> DELETE FROM cf_clear_bank_detail WHERE (clear_id = 14867) <==   |   [time]: ==> 4 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:28:44.548  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectBatchIds] [http-nio-8092-exec-3] => ==>  Preparing: SELECT bank_and_cash_id,record_seq_no,record_type,arap_type,arap_date,brand_id,bank_and_cash_status,balance,collection_unit,bank,bank_no,amount,balance_balance,check_date,clear_no,check_no,record_user,charges_remark,account_in_date,account_in_user,payment_branch,outgo_bank,outgo_bankno,outgo_confirm_user,remark,company_id,create_by,create_name,create_date,update_by,update_name,update_date,balance_name,source_code,pay_company,pay_company_id,pay_bank,pay_bank_no,pay_account_in_user,job_type FROM cf_bank_and_cash WHERE bank_and_cash_id IN ( ? )
08-02  10:28:44.552  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectBatchIds] [http-nio-8092-exec-3] => ==> Parameters: 2448(Long)
08-02  10:28:44.555  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectBatchIds] [http-nio-8092-exec-3] => <==      Total: 1
08-02  10:28:44.556  INFO  -|q2URvqgQUvMyNjNQ|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-3] =>     [sql]: ==> select * from cf_bank_and_cash where bank_and_cash_id in ( 2448 ) <==   |   [time]: ==> 6 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfBankAndCash(bankA ...  <==
08-02  10:28:44.565  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-3] => ==>  Preparing: UPDATE cf_bank_and_cash SET balance_balance=?, clear_no=? WHERE bank_and_cash_id=?
08-02  10:28:44.569  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-3] => ==> Parameters: 1990.0000(BigDecimal), (String), 2448(Long)
08-02  10:28:44.584  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-3] => <==    Updates: 1
08-02  10:28:44.585  INFO  -|q2URvqgQUvMyNjNQ|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-3] =>     [sql]: ==> UPDATE cf_bank_and_cash SET balance_balance=1990.0000, clear_no='' WHERE bank_and_cash_id=2448 <==   |   [time]: ==> 18 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:28:44.589  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectById] [http-nio-8092-exec-3] => ==>  Preparing: SELECT bank_and_cash_id,record_seq_no,record_type,arap_type,arap_date,brand_id,bank_and_cash_status,balance,collection_unit,bank,bank_no,amount,balance_balance,check_date,clear_no,check_no,record_user,charges_remark,account_in_date,account_in_user,payment_branch,outgo_bank,outgo_bankno,outgo_confirm_user,remark,company_id,create_by,create_name,create_date,update_by,update_name,update_date,balance_name,source_code,pay_company,pay_company_id,pay_bank,pay_bank_no,pay_account_in_user,job_type FROM cf_bank_and_cash WHERE bank_and_cash_id=?
08-02  10:28:44.592  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectById] [http-nio-8092-exec-3] => ==> Parameters: 2448(Long)
08-02  10:28:44.596  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectById] [http-nio-8092-exec-3] => <==      Total: 1
08-02  10:28:44.597  INFO  -|q2URvqgQUvMyNjNQ|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-3] =>     [sql]: ==> select * from cf_bank_and_cash where bank_and_cash_id=2448  <==   |   [time]: ==> 6 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfBankAndCash(bankA ...  <==
08-02  10:28:44.607  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-3] => ==>  Preparing: INSERT INTO cf_bs_operation_log ( id, operation_type, business_type, business_id, business_code, operation_date, operation_user_id, operation_user_name, operation_content ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )
08-02  10:28:44.616  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-3] => ==> Parameters: 1422021518738776066(Long), 3(Integer), 201(Integer), 2448(Long), CRG210726000016(String), 2021-08-02T10:28:44.602(LocalDateTime), 1336971001799380993(Long), 奇美拉(String), 123123123(String)
08-02  10:28:44.618  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-3] => <==    Updates: 1
08-02  10:28:44.619  INFO  -|q2URvqgQUvMyNjNQ|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-3] =>     [sql]: ==> INSERT INTO cf_bs_operation_log ( id, operation_type, business_type, business_id, business_code, operation_date, operation_user_id, operation_user_name, operation_content ) VALUES ( 1422021518738776066, 3, 201, 2448, 'CRG210726000016', '2021-08-02 10:28:44.602', 1336971001799380993, '奇美拉', '123123123' ) <==   |   [time]: ==> 5 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:28:44.622  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-3] => ==>  Preparing: UPDATE cf_bank_and_cash SET bank_and_cash_status=?, update_date=? WHERE bank_and_cash_id=?
08-02  10:28:44.627  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-3] => ==> Parameters: 2(Integer), 2021-08-02 10:28:44.597(Timestamp), 2448(Long)
08-02  10:28:44.629  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-3] => <==    Updates: 1
08-02  10:28:44.629  INFO  -|q2URvqgQUvMyNjNQ|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-3] =>     [sql]: ==> UPDATE cf_bank_and_cash SET bank_and_cash_status=2, update_date='2021-08-02 10:28:44.597' WHERE bank_and_cash_id=2448 <==   |   [time]: ==> 4 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:29:14.492  INFO  -||- [com.alibaba.nacos.client.config.impl.ClientWorker] [com.alibaba.nacos.client.Worker.longPolling.fixed-10.228.81.30_3848-test] => get changedGroupKeys:[]
08-02  10:29:14.499  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfClearHeaderMapper.updateById] [http-nio-8092-exec-3] => ==>  Preparing: UPDATE cf_clear_header SET clear_no=?, invoice_no=?, clear_method=?, clear_status=?, job_type=?, actual_ar_ap_date=?, brand_id=?, balance=?, fi_user=?, bank=?, bank_no=?, bank_amount=?, check_no=?, currency_code=?, exchange_rate=?, clear_by=?, clear_debit=?, clear_credit=?, clear_type=?, clear_balance=?, now_clear_debit=?, now_clear_credit=?, now_clear_type=?, now_clear_balance=?, last_balance_debit=?, last_balance_credit=?, last_balance_type=?, last_balance_balance=?, now_balance_debit=?, now_balance_credit=?, now_balance_type=?, now_balance_balance=?, remark=?, company_id=?, create_by=?, create_name=?, create_date=?, update_by=?, update_name=?, update_date=?, record_seq_no=?, receipt_screenshot=?, collection_and_pay_remark=?, reject_reason=? WHERE clear_id=?
08-02  10:29:14.504  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfClearHeaderMapper.updateById] [http-nio-8092-exec-3] => ==> Parameters: CL2108020002(String), (String), (String), 1(Integer), 3(Integer), null, 106(Long), 三只松鼠(String), (String), (String), (String), 0(BigDecimal), (String), RMB(String), 1.0000(BigDecimal), 1357232643485208577(Long), 600.0000(BigDecimal), 0.0000(BigDecimal), AR(String), 600.0000(BigDecimal), 1.0000(BigDecimal), 0.0000(BigDecimal), AR(String), 1.0000(BigDecimal), 0.0000(BigDecimal), 0.0000(BigDecimal), (String), 1.0000(BigDecimal), 0.0000(BigDecimal), 0.0000(BigDecimal), (String), 0.0000(BigDecimal), 123(String), 1(Long), 1357232643485208577(Long), 谢瑞(String), 2021-08-02T10:05:55(LocalDateTime), 1357232643485208577(Long), 谢瑞(String), 2021-08-02T10:28:44.630(LocalDateTime), CRG210726000016(String), (String), [{"fileName":"WLXT_需求规格说明书_首页案例.pdf","id":"6845659adb3a449c8ee0d84aaac009b6.pdf"}](String), null, 14867(Long)
08-02  10:29:14.507  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfClearHeaderMapper.updateById] [http-nio-8092-exec-3] => <==    Updates: 1
08-02  10:29:14.507  INFO  -|q2URvqgQUvMyNjNQ|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-3] =>     [sql]: ==> UPDATE cf_clear_header SET clear_no='CL2108020002', invoice_no='', clear_method='', clear_status=1, job_type=3, actual_ar_ap_date=null, brand_id=106, balance='三只松鼠', fi_user='', bank='', bank_no='', bank_amount=0, check_no='', currency_code='RMB', exchange_rate=1.0000, clear_by=1357232643485208577, clear_debit=600.0000, clear_credit=0.0000, clear_type='AR', clear_balance=600.0000, now_clear_debit=1.0000, now_clear_credit=0.0000, now_clear_type='AR', now_clear_balance=1.0000, last_balance_debit=0.0000, last_balance_credit=0.0000, last_balance_type='', last_balance_balance=1.0000, now_balance_debit=0.0000, now_balance_credit=0.0000, now_balance_type='', now_balance_balance=0.0000, remark='123', company_id=1, create_by=1357232643485208577, create_name='谢瑞', create_date='2021-08-02 10:05:55.0', update_by=1357232643485208577, update_name='谢瑞', update_date='2021-08-02 10:28:44.63', record_seq_no='CRG210726000016', receipt_screenshot='', collection_and_pay_remark='[{"fileName":"WLXT_需求规格说明书_首页案例.pdf","id":"6845659adb3a449c8ee0d84aaac009b6.pdf"}]', reject_reason=null WHERE clear_id=14867 <==   |   [time]: ==> 5 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:29:21.547  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-3] => ==>  Preparing: INSERT INTO cf_bs_operation_log ( id, operation_type, business_type, business_id, business_code, operation_date, operation_user_id, operation_user_name ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )
08-02  10:29:21.552  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-3] => ==> Parameters: 1422021673676365826(Long), 7(Integer), 204(Integer), 14867(Long), CL2108020002(String), 2021-08-02T10:29:21.545(LocalDateTime), 1336971001799380993(Long), 奇美拉(String)
08-02  10:29:21.555  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-3] => <==    Updates: 1
08-02  10:29:21.555  INFO  -|q2URvqgQUvMyNjNQ|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-3] =>     [sql]: ==> INSERT INTO cf_bs_operation_log ( id, operation_type, business_type, business_id, business_code, operation_date, operation_user_id, operation_user_name ) VALUES ( 1422021673676365826, 7, 204, 14867, 'CL2108020002', '2021-08-02 10:29:21.545', 1336971001799380993, '奇美拉' ) <==   |   [time]: ==> 6 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:29:21.561  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-3] => ==>  Preparing: SELECT clear_id,clear_no,invoice_no,clear_method,clear_status,job_type,actual_ar_ap_date,brand_id,balance,fi_user,bank,bank_no,bank_amount,check_no,currency_code,exchange_rate,clear_date,clear_by,clear_debit,clear_credit,clear_type,clear_balance,now_clear_debit,now_clear_credit,now_clear_type,now_clear_balance,last_balance_debit,last_balance_credit,last_balance_type,last_balance_balance,now_balance_debit,now_balance_credit,now_balance_type,now_balance_balance,remark,company_id,create_by,create_name,create_date,update_by,update_name,update_date,record_seq_no,receipt_screenshot,collection_and_pay_remark,reject_reason FROM cf_clear_header WHERE clear_id=?
08-02  10:29:21.569  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-3] => ==> Parameters: 14867(Long)
08-02  10:29:21.573  DEBUG -|q2URvqgQUvMyNjNQ|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-3] => <==      Total: 1
08-02  10:29:21.573  INFO  -|q2URvqgQUvMyNjNQ|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-3] =>     [sql]: ==> select * from cf_clear_header where clear_id=14867  <==   |   [time]: ==> 11 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfClearHeader(clear ...  <==
08-02  10:29:21.756  INFO  -|q2URvqgQUvMyNjNQ|- [HTTP_LOG] [http-nio-8092-exec-3] => RequestParams:     3247502034200={    "approvalId": 1422017277095575552,    "serviceName": "chenfan-cloud-finance",    "param": "{\"json\": \"{\\\"clearId\\\":14867,\\\"clearStatus\\\":3,\\\"updateDate\\\":\\\"2021-08-02T10:11:53.302\\\"}\", \"className\": \"CfClearHeader\"}",    "approvalFlag": false,    "approvalFinished": true,    "remark": "123123123"}
08-02  10:29:21.756  INFO  -|q2URvqgQUvMyNjNQ|- [HTTP_LOG] [http-nio-8092-exec-3] => Total:             59949ms
08-02  10:29:21.756  INFO  -|q2URvqgQUvMyNjNQ|- [HTTP_LOG] [http-nio-8092-exec-3] =>                           //                      
08-02  10:29:21.756  INFO  -|q2URvqgQUvMyNjNQ|- [HTTP_LOG] [http-nio-8092-exec-3] =>                          //                       
08-02  10:29:21.756  INFO  -|q2URvqgQUvMyNjNQ|- [HTTP_LOG] [http-nio-8092-exec-3] => ========================//                        



08-02  10:29:34.391  INFO  -|q2URvqgQUvMyNjKP|- [HTTP_LOG] [http-nio-8092-exec-4] => ========================\\                      
08-02  10:29:34.391  INFO  -|q2URvqgQUvMyNjKP|- [HTTP_LOG] [http-nio-8092-exec-4] =>                          \\                     
08-02  10:29:34.392  INFO  -|q2URvqgQUvMyNjKP|- [HTTP_LOG] [http-nio-8092-exec-4] =>                           \\                    
08-02  10:29:34.392  INFO  -|q2URvqgQUvMyNjKP|- [HTTP_LOG] [http-nio-8092-exec-4] => RequestURI:        /callback
08-02  10:29:36.330  INFO  -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.controller.common.CallbackController] [http-nio-8092-exec-4] => callback-> {    "approvalId": 1422017277095575552,    "serviceName": "chenfan-cloud-finance",    "param": "{\"json\": \"{\\\"clearId\\\":14867,\\\"clearStatus\\\":3,\\\"updateDate\\\":\\\"2021-08-02T10:11:53.302\\\"}\", \"className\": \"CfClearHeader\"}",    "approvalFlag": false,    "approvalFinished": true,    "remark": "123123123"}
08-02  10:29:51.419  INFO  -||- [com.alibaba.nacos.client.config.impl.ClientWorker] [com.alibaba.nacos.client.Worker.longPolling.fixed-10.228.81.30_3848-test] => get changedGroupKeys:[]
08-02  10:29:52.136  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-4] => ==>  Preparing: SELECT clear_id,clear_no,invoice_no,clear_method,clear_status,job_type,actual_ar_ap_date,brand_id,balance,fi_user,bank,bank_no,bank_amount,check_no,currency_code,exchange_rate,clear_date,clear_by,clear_debit,clear_credit,clear_type,clear_balance,now_clear_debit,now_clear_credit,now_clear_type,now_clear_balance,last_balance_debit,last_balance_credit,last_balance_type,last_balance_balance,now_balance_debit,now_balance_credit,now_balance_type,now_balance_balance,remark,company_id,create_by,create_name,create_date,update_by,update_name,update_date,record_seq_no,receipt_screenshot,collection_and_pay_remark,reject_reason FROM cf_clear_header WHERE clear_id=?
08-02  10:29:52.149  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-4] => ==> Parameters: 14867(Long)
08-02  10:29:52.152  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-4] => <==      Total: 1
08-02  10:29:52.153  INFO  -|q2URvqgQUvMyNjKP|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> select * from cf_clear_header where clear_id=14867  <==   |   [time]: ==> 14 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfClearHeader(clear ...  <==
08-02  10:29:52.155  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfClearDetailMapper.selectList] [http-nio-8092-exec-4] => ==>  Preparing: SELECT clear_detail_id,clear_id,invoice_no,invoice_title,balance,balance_name,invoice_title_name,charge_type,charge_source_type,source_currency_code,source_exchange_rate,charge_id,arap_type,clear_debit,clear_credit,cleared_amount,last_balance,now_balance,actual_clear_amount,charge_source_code,remark,currency_code,exchange_rate FROM cf_clear_detail WHERE (clear_id = ?)
08-02  10:29:52.157  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfClearDetailMapper.selectList] [http-nio-8092-exec-4] => ==> Parameters: 14867(Long)
08-02  10:29:52.165  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfClearDetailMapper.selectList] [http-nio-8092-exec-4] => <==      Total: 1
08-02  10:29:52.166  INFO  -|q2URvqgQUvMyNjKP|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> select * from cf_clear_detail where (clear_id = 14867) <==   |   [time]: ==> 11 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfClearDetail(clear ...  <==
08-02  10:29:52.167  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfChargeCommonMapper.selectById] [http-nio-8092-exec-4] => ==>  Preparing: SELECT charge_id,charge_code,charge_source_type,charge_type,check_status,arap_type,split_type,charge_source_code,charge_source_detail,currency_code,exchange_rate,tax_rate,charge_unit,charge_qty,price_pp,amount_pp,balance,finance_entity,charge_month_belong_to,tax_invoice_no,tax_invoice_date,invoice_no,invoice_title,invoice_title_name,invoice_date,clear_no,actual_amount,actual_date,actual_history_date,remark,charge_date,bill_source_type,invoice_entrance_date,sett_template,create_by,create_name,create_date,company_id,tenant_id,update_by,update_name,update_date,parent_id,split_id,invoice_form,invoice_type,invoice_content,invoice_remark,brand_id,overage FROM cf_charge_common WHERE charge_id=?
08-02  10:29:52.169  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfChargeCommonMapper.selectById] [http-nio-8092-exec-4] => ==> Parameters: 9616(Long)
08-02  10:29:52.172  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfChargeCommonMapper.selectById] [http-nio-8092-exec-4] => <==      Total: 1
08-02  10:29:52.173  INFO  -|q2URvqgQUvMyNjKP|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> select * from cf_charge_common where charge_id=9616  <==   |   [time]: ==> 5 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfChargeCommon(char ...  <==
08-02  10:29:52.175  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfChargeCommonMapper.updateById] [http-nio-8092-exec-4] => ==>  Preparing: UPDATE cf_charge_common SET charge_code=?, charge_source_type=?, charge_type=?, check_status=?, arap_type=?, split_type=?, charge_source_code=?, charge_source_detail=?, currency_code=?, exchange_rate=?, tax_rate=?, charge_qty=?, price_pp=?, amount_pp=?, balance=?, finance_entity=?, tax_invoice_no=?, tax_invoice_date=?, invoice_no=?, invoice_title=?, invoice_title_name=?, invoice_date=?, clear_no=?, actual_amount=?, actual_date=?, bill_source_type=?, invoice_entrance_date=?, create_by=?, create_name=?, create_date=?, company_id=?, tenant_id=?, update_by=?, update_name=?, update_date=?, parent_id=?, split_id=?, invoice_form=?, invoice_type=?, invoice_content=?, invoice_remark=?, brand_id=?, overage=? WHERE charge_id=?
08-02  10:29:52.179  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfChargeCommonMapper.updateById] [http-nio-8092-exec-4] => ==> Parameters: CRG210727000012(String), 3(Integer), 3(Integer), 1(Integer), AR(String), 1(Integer), SR2107270015(String), SR2107270015(String), RMB(String), 1.0000(BigDecimal), 0.00(BigDecimal), 1(Integer), 600.0000(BigDecimal), 600.00(BigDecimal), 三只松鼠(String), 宁波宸帆网络技术有限公司(String), 123(String), 2021-07-27T00:00(LocalDateTime), FP202107270016(String), 三只松鼠(String), 三只松鼠(String), 2021-07-27T15:39:06(LocalDateTime), (String), 0.0000(BigDecimal), 2021-08-02T10:05:55(LocalDateTime), 4(Integer), 2021-07-27T15:28:33(LocalDateTime), 1355109855085465602(Long), 徐苡芮(String), 2021-07-27T15:29:08(LocalDateTime), 4(Long), 1(Long), 1347390028526915585(Long), 海洋(String), 2021-07-27T15:29:08(LocalDateTime), 9613(Long), 3(Integer), 1(Integer), (String), (String), (String), 106(Long), 600.0000(BigDecimal), 9616(Long)
08-02  10:29:52.181  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfChargeCommonMapper.updateById] [http-nio-8092-exec-4] => <==    Updates: 1
08-02  10:29:52.182  INFO  -|q2URvqgQUvMyNjKP|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> UPDATE cf_charge_common SET charge_code='CRG210727000012', charge_source_type=3, charge_type=3, check_status=1, arap_type='AR', split_type=1, charge_source_code='SR2107270015', charge_source_detail='SR2107270015', currency_code='RMB', exchange_rate=1.0000, tax_rate=0.00, charge_qty=1, price_pp=600.0000, amount_pp=600.00, balance='三只松鼠', finance_entity='宁波宸帆网络技术有限公司', tax_invoice_no='123', tax_invoice_date='2021-07-27 00:00:00.0', invoice_no='FP202107270016', invoice_title='三只松鼠', invoice_title_name='三只松鼠', invoice_date='2021-07-27 15:39:06.0', clear_no='', actual_amount=0.0000, actual_date='2021-08-02 10:05:55.0', bill_source_type=4, invoice_entrance_date='2021-07-27 15:28:33.0', create_by=1355109855085465602, create_name='徐苡芮', create_date='2021-07-27 15:29:08.0', company_id=4, tenant_id=1, update_by=1347390028526915585, update_name='海洋', update_date='2021-07-27 15:29:08.0', parent_id=9613, split_id=3, invoice_form=1, invoice_type='', invoice_content='', invoice_remark='', brand_id=106, overage=600.0000 WHERE charge_id=9616 <==   |   [time]: ==> 4 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:29:52.184  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfClearDetailMapper.updateById] [http-nio-8092-exec-4] => ==>  Preparing: UPDATE cf_clear_detail SET clear_id=?, invoice_no=?, invoice_title=?, balance=?, balance_name=?, invoice_title_name=?, charge_type=?, charge_source_type=?, source_currency_code=?, source_exchange_rate=?, charge_id=?, arap_type=?, clear_debit=?, clear_credit=?, cleared_amount=?, last_balance=?, now_balance=?, actual_clear_amount=?, charge_source_code=?, remark=?, currency_code=?, exchange_rate=? WHERE clear_detail_id=?
08-02  10:29:52.186  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfClearDetailMapper.updateById] [http-nio-8092-exec-4] => ==> Parameters: 14867(Long), 123(String), 三只松鼠(String), 三只松鼠(String), (String), 三只松鼠(String), 3(String), 3(Integer), (String), 0.0000(BigDecimal), 9616(Long), AR(String), 600.0000(BigDecimal), 0.0000(BigDecimal), 600.0000(BigDecimal), 600.0000(BigDecimal), 0(BigDecimal), 1.0000(BigDecimal), SR2107270015(String), (String), RMB(String), 1.0000(BigDecimal), 36661(Long)
08-02  10:29:52.188  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfClearDetailMapper.updateById] [http-nio-8092-exec-4] => <==    Updates: 1
08-02  10:29:52.188  INFO  -|q2URvqgQUvMyNjKP|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> UPDATE cf_clear_detail SET clear_id=14867, invoice_no='123', invoice_title='三只松鼠', balance='三只松鼠', balance_name='', invoice_title_name='三只松鼠', charge_type='3', charge_source_type=3, source_currency_code='', source_exchange_rate=0.0000, charge_id=9616, arap_type='AR', clear_debit=600.0000, clear_credit=0.0000, cleared_amount=600.0000, last_balance=600.0000, now_balance=0, actual_clear_amount=1.0000, charge_source_code='SR2107270015', remark='', currency_code='RMB', exchange_rate=1.0000 WHERE clear_detail_id=36661 <==   |   [time]: ==> 3 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:29:52.189  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfClearBankDetailMapper.selectList] [http-nio-8092-exec-4] => ==>  Preparing: SELECT clear_bank_detail_id,clear_id,bank_and_cash_id,record_seq_no,record_type,amount,balance_balance,last_balance,arap_type,arap_date,payment_branch,remark,create_date FROM cf_clear_bank_detail WHERE (clear_id = ?)
08-02  10:29:52.191  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfClearBankDetailMapper.selectList] [http-nio-8092-exec-4] => ==> Parameters: 14867(Long)
08-02  10:29:52.193  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfClearBankDetailMapper.selectList] [http-nio-8092-exec-4] => <==      Total: 1
08-02  10:29:52.194  INFO  -|q2URvqgQUvMyNjKP|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> select * from cf_clear_bank_detail where (clear_id = 14867) <==   |   [time]: ==> 4 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfClearBankDetail(c ...  <==
08-02  10:29:52.195  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfClearBankDetailMapper.delete] [http-nio-8092-exec-4] => ==>  Preparing: DELETE FROM cf_clear_bank_detail WHERE (clear_id = ?)
08-02  10:29:52.197  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfClearBankDetailMapper.delete] [http-nio-8092-exec-4] => ==> Parameters: 14867(Long)
08-02  10:29:52.199  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfClearBankDetailMapper.delete] [http-nio-8092-exec-4] => <==    Updates: 1
08-02  10:29:52.199  INFO  -|q2URvqgQUvMyNjKP|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> DELETE FROM cf_clear_bank_detail WHERE (clear_id = 14867) <==   |   [time]: ==> 3 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:29:52.200  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectBatchIds] [http-nio-8092-exec-4] => ==>  Preparing: SELECT bank_and_cash_id,record_seq_no,record_type,arap_type,arap_date,brand_id,bank_and_cash_status,balance,collection_unit,bank,bank_no,amount,balance_balance,check_date,clear_no,check_no,record_user,charges_remark,account_in_date,account_in_user,payment_branch,outgo_bank,outgo_bankno,outgo_confirm_user,remark,company_id,create_by,create_name,create_date,update_by,update_name,update_date,balance_name,source_code,pay_company,pay_company_id,pay_bank,pay_bank_no,pay_account_in_user,job_type FROM cf_bank_and_cash WHERE bank_and_cash_id IN ( ? )
08-02  10:29:52.202  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectBatchIds] [http-nio-8092-exec-4] => ==> Parameters: 2448(Long)
08-02  10:29:52.205  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectBatchIds] [http-nio-8092-exec-4] => <==      Total: 1
08-02  10:29:52.205  INFO  -|q2URvqgQUvMyNjKP|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> select * from cf_bank_and_cash where bank_and_cash_id in ( 2448 ) <==   |   [time]: ==> 5 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfBankAndCash(bankA ...  <==
08-02  10:29:52.207  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-4] => ==>  Preparing: UPDATE cf_bank_and_cash SET balance_balance=?, clear_no=? WHERE bank_and_cash_id=?
08-02  10:29:52.210  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-4] => ==> Parameters: 1990.0000(BigDecimal), (String), 2448(Long)
08-02  10:29:52.212  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-4] => <==    Updates: 1
08-02  10:29:52.212  INFO  -|q2URvqgQUvMyNjKP|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> UPDATE cf_bank_and_cash SET balance_balance=1990.0000, clear_no='' WHERE bank_and_cash_id=2448 <==   |   [time]: ==> 3 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:29:52.215  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectById] [http-nio-8092-exec-4] => ==>  Preparing: SELECT bank_and_cash_id,record_seq_no,record_type,arap_type,arap_date,brand_id,bank_and_cash_status,balance,collection_unit,bank,bank_no,amount,balance_balance,check_date,clear_no,check_no,record_user,charges_remark,account_in_date,account_in_user,payment_branch,outgo_bank,outgo_bankno,outgo_confirm_user,remark,company_id,create_by,create_name,create_date,update_by,update_name,update_date,balance_name,source_code,pay_company,pay_company_id,pay_bank,pay_bank_no,pay_account_in_user,job_type FROM cf_bank_and_cash WHERE bank_and_cash_id=?
08-02  10:29:52.220  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectById] [http-nio-8092-exec-4] => ==> Parameters: 2448(Long)
08-02  10:29:52.223  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectById] [http-nio-8092-exec-4] => <==      Total: 1
08-02  10:29:52.224  INFO  -|q2URvqgQUvMyNjKP|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> select * from cf_bank_and_cash where bank_and_cash_id=2448  <==   |   [time]: ==> 6 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfBankAndCash(bankA ...  <==
08-02  10:29:52.273  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-4] => ==>  Preparing: INSERT INTO cf_bs_operation_log ( id, operation_type, business_type, business_id, business_code, operation_date, operation_user_id, operation_user_name, operation_content ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )
08-02  10:29:52.276  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-4] => ==> Parameters: 1422021802554744834(Long), 3(Integer), 201(Integer), 2448(Long), CRG210726000016(String), 2021-08-02T10:29:52.273(LocalDateTime), 1336971001799380993(Long), 奇美拉(String), 123123123(String)
08-02  10:29:52.278  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-4] => <==    Updates: 1
08-02  10:29:52.279  INFO  -|q2URvqgQUvMyNjKP|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> INSERT INTO cf_bs_operation_log ( id, operation_type, business_type, business_id, business_code, operation_date, operation_user_id, operation_user_name, operation_content ) VALUES ( 1422021802554744834, 3, 201, 2448, 'CRG210726000016', '2021-08-02 10:29:52.273', 1336971001799380993, '奇美拉', '123123123' ) <==   |   [time]: ==> 4 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:29:52.402  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-4] => ==>  Preparing: UPDATE cf_bank_and_cash SET bank_and_cash_status=?, update_date=? WHERE bank_and_cash_id=?
08-02  10:29:52.405  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-4] => ==> Parameters: 2(Integer), 2021-08-02 10:29:52.224(Timestamp), 2448(Long)
08-02  10:29:52.408  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-4] => <==    Updates: 1
08-02  10:29:52.408  INFO  -|q2URvqgQUvMyNjKP|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> UPDATE cf_bank_and_cash SET bank_and_cash_status=2, update_date='2021-08-02 10:29:52.224' WHERE bank_and_cash_id=2448 <==   |   [time]: ==> 5 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:29:52.638  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfClearHeaderMapper.updateById] [http-nio-8092-exec-4] => ==>  Preparing: UPDATE cf_clear_header SET clear_no=?, invoice_no=?, clear_method=?, clear_status=?, job_type=?, actual_ar_ap_date=?, brand_id=?, balance=?, fi_user=?, bank=?, bank_no=?, bank_amount=?, check_no=?, currency_code=?, exchange_rate=?, clear_by=?, clear_debit=?, clear_credit=?, clear_type=?, clear_balance=?, now_clear_debit=?, now_clear_credit=?, now_clear_type=?, now_clear_balance=?, last_balance_debit=?, last_balance_credit=?, last_balance_type=?, last_balance_balance=?, now_balance_debit=?, now_balance_credit=?, now_balance_type=?, now_balance_balance=?, remark=?, company_id=?, create_by=?, create_name=?, create_date=?, update_by=?, update_name=?, update_date=?, record_seq_no=?, receipt_screenshot=?, collection_and_pay_remark=?, reject_reason=? WHERE clear_id=?
08-02  10:29:52.642  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfClearHeaderMapper.updateById] [http-nio-8092-exec-4] => ==> Parameters: CL2108020002(String), (String), (String), 1(Integer), 3(Integer), null, 106(Long), 三只松鼠(String), (String), (String), (String), 0(BigDecimal), (String), RMB(String), 1.0000(BigDecimal), 1357232643485208577(Long), 600.0000(BigDecimal), 0.0000(BigDecimal), AR(String), 600.0000(BigDecimal), 1.0000(BigDecimal), 0.0000(BigDecimal), AR(String), 1.0000(BigDecimal), 0.0000(BigDecimal), 0.0000(BigDecimal), (String), 1.0000(BigDecimal), 0.0000(BigDecimal), 0.0000(BigDecimal), (String), 0.0000(BigDecimal), 123(String), 1(Long), 1357232643485208577(Long), 谢瑞(String), 2021-08-02T10:05:55(LocalDateTime), 1357232643485208577(Long), 谢瑞(String), 2021-08-02T10:29:52.410(LocalDateTime), CRG210726000016(String), (String), [{"fileName":"WLXT_需求规格说明书_首页案例.pdf","id":"6845659adb3a449c8ee0d84aaac009b6.pdf"}](String), null, 14867(Long)
08-02  10:29:52.645  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfClearHeaderMapper.updateById] [http-nio-8092-exec-4] => <==    Updates: 1
08-02  10:29:52.646  INFO  -|q2URvqgQUvMyNjKP|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> UPDATE cf_clear_header SET clear_no='CL2108020002', invoice_no='', clear_method='', clear_status=1, job_type=3, actual_ar_ap_date=null, brand_id=106, balance='三只松鼠', fi_user='', bank='', bank_no='', bank_amount=0, check_no='', currency_code='RMB', exchange_rate=1.0000, clear_by=1357232643485208577, clear_debit=600.0000, clear_credit=0.0000, clear_type='AR', clear_balance=600.0000, now_clear_debit=1.0000, now_clear_credit=0.0000, now_clear_type='AR', now_clear_balance=1.0000, last_balance_debit=0.0000, last_balance_credit=0.0000, last_balance_type='', last_balance_balance=1.0000, now_balance_debit=0.0000, now_balance_credit=0.0000, now_balance_type='', now_balance_balance=0.0000, remark='123', company_id=1, create_by=1357232643485208577, create_name='谢瑞', create_date='2021-08-02 10:05:55.0', update_by=1357232643485208577, update_name='谢瑞', update_date='2021-08-02 10:29:52.41', record_seq_no='CRG210726000016', receipt_screenshot='', collection_and_pay_remark='[{"fileName":"WLXT_需求规格说明书_首页案例.pdf","id":"6845659adb3a449c8ee0d84aaac009b6.pdf"}]', reject_reason=null WHERE clear_id=14867 <==   |   [time]: ==> 5 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:29:52.893  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-4] => ==>  Preparing: INSERT INTO cf_bs_operation_log ( id, operation_type, business_type, business_id, business_code, operation_date, operation_user_id, operation_user_name ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )
08-02  10:29:52.897  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-4] => ==> Parameters: 1422021805151019009(Long), 7(Integer), 204(Integer), 14867(Long), CL2108020002(String), 2021-08-02T10:29:52.893(LocalDateTime), 1336971001799380993(Long), 奇美拉(String)
08-02  10:29:52.900  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-4] => <==    Updates: 1
08-02  10:29:52.900  INFO  -|q2URvqgQUvMyNjKP|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> INSERT INTO cf_bs_operation_log ( id, operation_type, business_type, business_id, business_code, operation_date, operation_user_id, operation_user_name ) VALUES ( 1422021805151019009, 7, 204, 14867, 'CL2108020002', '2021-08-02 10:29:52.893', 1336971001799380993, '奇美拉' ) <==   |   [time]: ==> 6 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:29:53.017  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-4] => ==>  Preparing: SELECT clear_id,clear_no,invoice_no,clear_method,clear_status,job_type,actual_ar_ap_date,brand_id,balance,fi_user,bank,bank_no,bank_amount,check_no,currency_code,exchange_rate,clear_date,clear_by,clear_debit,clear_credit,clear_type,clear_balance,now_clear_debit,now_clear_credit,now_clear_type,now_clear_balance,last_balance_debit,last_balance_credit,last_balance_type,last_balance_balance,now_balance_debit,now_balance_credit,now_balance_type,now_balance_balance,remark,company_id,create_by,create_name,create_date,update_by,update_name,update_date,record_seq_no,receipt_screenshot,collection_and_pay_remark,reject_reason FROM cf_clear_header WHERE clear_id=?
08-02  10:29:53.020  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-4] => ==> Parameters: 14867(Long)
08-02  10:29:53.023  DEBUG -|q2URvqgQUvMyNjKP|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-4] => <==      Total: 1
08-02  10:29:53.024  INFO  -|q2URvqgQUvMyNjKP|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> select * from cf_clear_header where clear_id=14867  <==   |   [time]: ==> 6 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfClearHeader(clear ...  <==
08-02  10:29:53.029  INFO  -|q2URvqgQUvMyNjKP|- [HTTP_LOG] [http-nio-8092-exec-4] => RequestParams:     3320092573800={    "approvalId": 1422017277095575552,    "serviceName": "chenfan-cloud-finance",    "param": "{\"json\": \"{\\\"clearId\\\":14867,\\\"clearStatus\\\":3,\\\"updateDate\\\":\\\"2021-08-02T10:11:53.302\\\"}\", \"className\": \"CfClearHeader\"}",    "approvalFlag": false,    "approvalFinished": true,    "remark": "123123123"}
08-02  10:29:53.029  INFO  -|q2URvqgQUvMyNjKP|- [HTTP_LOG] [http-nio-8092-exec-4] => Total:             18638ms
08-02  10:29:53.029  INFO  -|q2URvqgQUvMyNjKP|- [HTTP_LOG] [http-nio-8092-exec-4] =>                           //                      
08-02  10:29:53.029  INFO  -|q2URvqgQUvMyNjKP|- [HTTP_LOG] [http-nio-8092-exec-4] =>                          //                       
08-02  10:29:53.029  INFO  -|q2URvqgQUvMyNjKP|- [HTTP_LOG] [http-nio-8092-exec-4] => ========================//                        



08-02  10:30:00.301  INFO  -|q2URvqgQUvMyNjAz|- [HTTP_LOG] [http-nio-8092-exec-5] => ========================\\                      
08-02  10:30:00.301  INFO  -|q2URvqgQUvMyNjAz|- [HTTP_LOG] [http-nio-8092-exec-5] =>                          \\                     
08-02  10:30:00.302  INFO  -|q2URvqgQUvMyNjAz|- [HTTP_LOG] [http-nio-8092-exec-5] =>                           \\                    
08-02  10:30:00.302  INFO  -|q2URvqgQUvMyNjAz|- [HTTP_LOG] [http-nio-8092-exec-5] => RequestURI:        /callback
08-02  10:30:03.294  INFO  -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.controller.common.CallbackController] [http-nio-8092-exec-5] => callback-> {    "approvalId": 1422017277095575552,    "serviceName": "chenfan-cloud-finance",    "param": "{\"json\": \"{\\\"clearId\\\":14867,\\\"clearStatus\\\":3,\\\"updateDate\\\":\\\"2021-08-02T10:11:53.302\\\"}\", \"className\": \"CfClearHeader\"}",    "approvalFlag": false,    "approvalFinished": true,    "remark": "123123123"}
08-02  10:30:28.436  INFO  -||- [com.alibaba.nacos.client.config.impl.ClientWorker] [com.alibaba.nacos.client.Worker.longPolling.fixed-10.228.81.30_3848-test] => get changedGroupKeys:[]
08-02  10:30:29.070  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-5] => ==>  Preparing: SELECT clear_id,clear_no,invoice_no,clear_method,clear_status,job_type,actual_ar_ap_date,brand_id,balance,fi_user,bank,bank_no,bank_amount,check_no,currency_code,exchange_rate,clear_date,clear_by,clear_debit,clear_credit,clear_type,clear_balance,now_clear_debit,now_clear_credit,now_clear_type,now_clear_balance,last_balance_debit,last_balance_credit,last_balance_type,last_balance_balance,now_balance_debit,now_balance_credit,now_balance_type,now_balance_balance,remark,company_id,create_by,create_name,create_date,update_by,update_name,update_date,record_seq_no,receipt_screenshot,collection_and_pay_remark,reject_reason FROM cf_clear_header WHERE clear_id=?
08-02  10:30:29.073  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-5] => ==> Parameters: 14867(Long)
08-02  10:30:29.076  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-5] => <==      Total: 1
08-02  10:30:29.077  INFO  -|q2URvqgQUvMyNjAz|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-5] =>     [sql]: ==> select * from cf_clear_header where clear_id=14867  <==   |   [time]: ==> 6 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfClearHeader(clear ...  <==
08-02  10:30:29.078  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfClearDetailMapper.selectList] [http-nio-8092-exec-5] => ==>  Preparing: SELECT clear_detail_id,clear_id,invoice_no,invoice_title,balance,balance_name,invoice_title_name,charge_type,charge_source_type,source_currency_code,source_exchange_rate,charge_id,arap_type,clear_debit,clear_credit,cleared_amount,last_balance,now_balance,actual_clear_amount,charge_source_code,remark,currency_code,exchange_rate FROM cf_clear_detail WHERE (clear_id = ?)
08-02  10:30:29.081  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfClearDetailMapper.selectList] [http-nio-8092-exec-5] => ==> Parameters: 14867(Long)
08-02  10:30:29.090  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfClearDetailMapper.selectList] [http-nio-8092-exec-5] => <==      Total: 1
08-02  10:30:29.091  INFO  -|q2URvqgQUvMyNjAz|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-5] =>     [sql]: ==> select * from cf_clear_detail where (clear_id = 14867) <==   |   [time]: ==> 11 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfClearDetail(clear ...  <==
08-02  10:30:29.091  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfChargeCommonMapper.selectById] [http-nio-8092-exec-5] => ==>  Preparing: SELECT charge_id,charge_code,charge_source_type,charge_type,check_status,arap_type,split_type,charge_source_code,charge_source_detail,currency_code,exchange_rate,tax_rate,charge_unit,charge_qty,price_pp,amount_pp,balance,finance_entity,charge_month_belong_to,tax_invoice_no,tax_invoice_date,invoice_no,invoice_title,invoice_title_name,invoice_date,clear_no,actual_amount,actual_date,actual_history_date,remark,charge_date,bill_source_type,invoice_entrance_date,sett_template,create_by,create_name,create_date,company_id,tenant_id,update_by,update_name,update_date,parent_id,split_id,invoice_form,invoice_type,invoice_content,invoice_remark,brand_id,overage FROM cf_charge_common WHERE charge_id=?
08-02  10:30:29.094  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfChargeCommonMapper.selectById] [http-nio-8092-exec-5] => ==> Parameters: 9616(Long)
08-02  10:30:29.097  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfChargeCommonMapper.selectById] [http-nio-8092-exec-5] => <==      Total: 1
08-02  10:30:29.099  INFO  -|q2URvqgQUvMyNjAz|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-5] =>     [sql]: ==> select * from cf_charge_common where charge_id=9616  <==   |   [time]: ==> 7 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfChargeCommon(char ...  <==
08-02  10:30:29.102  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfChargeCommonMapper.updateById] [http-nio-8092-exec-5] => ==>  Preparing: UPDATE cf_charge_common SET charge_code=?, charge_source_type=?, charge_type=?, check_status=?, arap_type=?, split_type=?, charge_source_code=?, charge_source_detail=?, currency_code=?, exchange_rate=?, tax_rate=?, charge_qty=?, price_pp=?, amount_pp=?, balance=?, finance_entity=?, tax_invoice_no=?, tax_invoice_date=?, invoice_no=?, invoice_title=?, invoice_title_name=?, invoice_date=?, clear_no=?, actual_amount=?, actual_date=?, bill_source_type=?, invoice_entrance_date=?, create_by=?, create_name=?, create_date=?, company_id=?, tenant_id=?, update_by=?, update_name=?, update_date=?, parent_id=?, split_id=?, invoice_form=?, invoice_type=?, invoice_content=?, invoice_remark=?, brand_id=?, overage=? WHERE charge_id=?
08-02  10:30:29.105  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfChargeCommonMapper.updateById] [http-nio-8092-exec-5] => ==> Parameters: CRG210727000012(String), 3(Integer), 3(Integer), 1(Integer), AR(String), 1(Integer), SR2107270015(String), SR2107270015(String), RMB(String), 1.0000(BigDecimal), 0.00(BigDecimal), 1(Integer), 600.0000(BigDecimal), 600.00(BigDecimal), 三只松鼠(String), 宁波宸帆网络技术有限公司(String), 123(String), 2021-07-27T00:00(LocalDateTime), FP202107270016(String), 三只松鼠(String), 三只松鼠(String), 2021-07-27T15:39:06(LocalDateTime), (String), 0.0000(BigDecimal), 2021-08-02T10:05:55(LocalDateTime), 4(Integer), 2021-07-27T15:28:33(LocalDateTime), 1355109855085465602(Long), 徐苡芮(String), 2021-07-27T15:29:08(LocalDateTime), 4(Long), 1(Long), 1347390028526915585(Long), 海洋(String), 2021-07-27T15:29:08(LocalDateTime), 9613(Long), 3(Integer), 1(Integer), (String), (String), (String), 106(Long), 600.0000(BigDecimal), 9616(Long)
08-02  10:30:29.107  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfChargeCommonMapper.updateById] [http-nio-8092-exec-5] => <==    Updates: 1
08-02  10:30:29.108  INFO  -|q2URvqgQUvMyNjAz|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-5] =>     [sql]: ==> UPDATE cf_charge_common SET charge_code='CRG210727000012', charge_source_type=3, charge_type=3, check_status=1, arap_type='AR', split_type=1, charge_source_code='SR2107270015', charge_source_detail='SR2107270015', currency_code='RMB', exchange_rate=1.0000, tax_rate=0.00, charge_qty=1, price_pp=600.0000, amount_pp=600.00, balance='三只松鼠', finance_entity='宁波宸帆网络技术有限公司', tax_invoice_no='123', tax_invoice_date='2021-07-27 00:00:00.0', invoice_no='FP202107270016', invoice_title='三只松鼠', invoice_title_name='三只松鼠', invoice_date='2021-07-27 15:39:06.0', clear_no='', actual_amount=0.0000, actual_date='2021-08-02 10:05:55.0', bill_source_type=4, invoice_entrance_date='2021-07-27 15:28:33.0', create_by=1355109855085465602, create_name='徐苡芮', create_date='2021-07-27 15:29:08.0', company_id=4, tenant_id=1, update_by=1347390028526915585, update_name='海洋', update_date='2021-07-27 15:29:08.0', parent_id=9613, split_id=3, invoice_form=1, invoice_type='', invoice_content='', invoice_remark='', brand_id=106, overage=600.0000 WHERE charge_id=9616 <==   |   [time]: ==> 5 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:30:29.109  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfClearDetailMapper.updateById] [http-nio-8092-exec-5] => ==>  Preparing: UPDATE cf_clear_detail SET clear_id=?, invoice_no=?, invoice_title=?, balance=?, balance_name=?, invoice_title_name=?, charge_type=?, charge_source_type=?, source_currency_code=?, source_exchange_rate=?, charge_id=?, arap_type=?, clear_debit=?, clear_credit=?, cleared_amount=?, last_balance=?, now_balance=?, actual_clear_amount=?, charge_source_code=?, remark=?, currency_code=?, exchange_rate=? WHERE clear_detail_id=?
08-02  10:30:29.112  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfClearDetailMapper.updateById] [http-nio-8092-exec-5] => ==> Parameters: 14867(Long), 123(String), 三只松鼠(String), 三只松鼠(String), (String), 三只松鼠(String), 3(String), 3(Integer), (String), 0.0000(BigDecimal), 9616(Long), AR(String), 600.0000(BigDecimal), 0.0000(BigDecimal), 600.0000(BigDecimal), 600.0000(BigDecimal), 0(BigDecimal), 1.0000(BigDecimal), SR2107270015(String), (String), RMB(String), 1.0000(BigDecimal), 36661(Long)
08-02  10:30:29.121  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfClearDetailMapper.updateById] [http-nio-8092-exec-5] => <==    Updates: 1
08-02  10:30:29.121  INFO  -|q2URvqgQUvMyNjAz|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-5] =>     [sql]: ==> UPDATE cf_clear_detail SET clear_id=14867, invoice_no='123', invoice_title='三只松鼠', balance='三只松鼠', balance_name='', invoice_title_name='三只松鼠', charge_type='3', charge_source_type=3, source_currency_code='', source_exchange_rate=0.0000, charge_id=9616, arap_type='AR', clear_debit=600.0000, clear_credit=0.0000, cleared_amount=600.0000, last_balance=600.0000, now_balance=0, actual_clear_amount=1.0000, charge_source_code='SR2107270015', remark='', currency_code='RMB', exchange_rate=1.0000 WHERE clear_detail_id=36661 <==   |   [time]: ==> 11 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:30:29.122  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfClearBankDetailMapper.selectList] [http-nio-8092-exec-5] => ==>  Preparing: SELECT clear_bank_detail_id,clear_id,bank_and_cash_id,record_seq_no,record_type,amount,balance_balance,last_balance,arap_type,arap_date,payment_branch,remark,create_date FROM cf_clear_bank_detail WHERE (clear_id = ?)
08-02  10:30:29.125  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfClearBankDetailMapper.selectList] [http-nio-8092-exec-5] => ==> Parameters: 14867(Long)
08-02  10:30:29.126  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfClearBankDetailMapper.selectList] [http-nio-8092-exec-5] => <==      Total: 1
08-02  10:30:29.127  INFO  -|q2URvqgQUvMyNjAz|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-5] =>     [sql]: ==> select * from cf_clear_bank_detail where (clear_id = 14867) <==   |   [time]: ==> 3 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfClearBankDetail(c ...  <==
08-02  10:30:29.128  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfClearBankDetailMapper.delete] [http-nio-8092-exec-5] => ==>  Preparing: DELETE FROM cf_clear_bank_detail WHERE (clear_id = ?)
08-02  10:30:29.130  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfClearBankDetailMapper.delete] [http-nio-8092-exec-5] => ==> Parameters: 14867(Long)
08-02  10:30:29.132  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfClearBankDetailMapper.delete] [http-nio-8092-exec-5] => <==    Updates: 1
08-02  10:30:29.132  INFO  -|q2URvqgQUvMyNjAz|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-5] =>     [sql]: ==> DELETE FROM cf_clear_bank_detail WHERE (clear_id = 14867) <==   |   [time]: ==> 4 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:30:29.132  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectBatchIds] [http-nio-8092-exec-5] => ==>  Preparing: SELECT bank_and_cash_id,record_seq_no,record_type,arap_type,arap_date,brand_id,bank_and_cash_status,balance,collection_unit,bank,bank_no,amount,balance_balance,check_date,clear_no,check_no,record_user,charges_remark,account_in_date,account_in_user,payment_branch,outgo_bank,outgo_bankno,outgo_confirm_user,remark,company_id,create_by,create_name,create_date,update_by,update_name,update_date,balance_name,source_code,pay_company,pay_company_id,pay_bank,pay_bank_no,pay_account_in_user,job_type FROM cf_bank_and_cash WHERE bank_and_cash_id IN ( ? )
08-02  10:30:29.135  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectBatchIds] [http-nio-8092-exec-5] => ==> Parameters: 2448(Long)
08-02  10:30:29.138  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectBatchIds] [http-nio-8092-exec-5] => <==      Total: 1
08-02  10:30:29.138  INFO  -|q2URvqgQUvMyNjAz|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-5] =>     [sql]: ==> select * from cf_bank_and_cash where bank_and_cash_id in ( 2448 ) <==   |   [time]: ==> 5 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfBankAndCash(bankA ...  <==
08-02  10:30:29.140  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-5] => ==>  Preparing: UPDATE cf_bank_and_cash SET balance_balance=?, clear_no=? WHERE bank_and_cash_id=?
08-02  10:30:29.143  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-5] => ==> Parameters: 1990.0000(BigDecimal), (String), 2448(Long)
08-02  10:30:29.145  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-5] => <==    Updates: 1
08-02  10:30:29.145  INFO  -|q2URvqgQUvMyNjAz|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-5] =>     [sql]: ==> UPDATE cf_bank_and_cash SET balance_balance=1990.0000, clear_no='' WHERE bank_and_cash_id=2448 <==   |   [time]: ==> 4 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:30:29.149  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectById] [http-nio-8092-exec-5] => ==>  Preparing: SELECT bank_and_cash_id,record_seq_no,record_type,arap_type,arap_date,brand_id,bank_and_cash_status,balance,collection_unit,bank,bank_no,amount,balance_balance,check_date,clear_no,check_no,record_user,charges_remark,account_in_date,account_in_user,payment_branch,outgo_bank,outgo_bankno,outgo_confirm_user,remark,company_id,create_by,create_name,create_date,update_by,update_name,update_date,balance_name,source_code,pay_company,pay_company_id,pay_bank,pay_bank_no,pay_account_in_user,job_type FROM cf_bank_and_cash WHERE bank_and_cash_id=?
08-02  10:30:29.152  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectById] [http-nio-8092-exec-5] => ==> Parameters: 2448(Long)
08-02  10:30:29.155  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectById] [http-nio-8092-exec-5] => <==      Total: 1
08-02  10:30:29.155  INFO  -|q2URvqgQUvMyNjAz|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-5] =>     [sql]: ==> select * from cf_bank_and_cash where bank_and_cash_id=2448  <==   |   [time]: ==> 5 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfBankAndCash(bankA ...  <==
08-02  10:31:09.496  WARN  -||- [com.alibaba.nacos.client.naming] [com.alibaba.nacos.naming.beat.sender] => failed to request http://10.228.81.30:3848/nacos/v1/ns/instance/beat?app=unknown&namespaceId=test&port=8092&clusterName=DEFAULT&ip=10.228.84.57&serviceName=CC_GROUP%40%40chenfan-cloud-finance&encoding=UTF-8 from 10.228.81.30
08-02  10:31:09.497  ERROR -||- [com.alibaba.nacos.client.naming] [com.alibaba.nacos.naming.beat.sender] => [NA] failed to request 
java.net.SocketTimeoutException: null
	at java.net.SocksSocketImpl.remainingMillis(SocksSocketImpl.java:113)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at com.alibaba.nacos.client.naming.net.HttpClient.request(HttpClient.java:86)
	at com.alibaba.nacos.client.naming.net.NamingProxy.callServer(NamingProxy.java:433)
	at com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:468)
	at com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:401)
	at com.alibaba.nacos.client.naming.net.NamingProxy.sendBeat(NamingProxy.java:343)
	at com.alibaba.nacos.client.naming.beat.BeatReactor$BeatTask.run(BeatReactor.java:108)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266)
	at java.util.concurrent.FutureTask.run(FutureTask.java)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
08-02  10:31:09.496  INFO  -||- [com.alibaba.nacos.client.config.impl.ClientWorker] [com.alibaba.nacos.client.Worker.longPolling.fixed-10.228.81.30_3848-test] => get changedGroupKeys:[]
08-02  10:31:09.498  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-5] => ==>  Preparing: INSERT INTO cf_bs_operation_log ( id, operation_type, business_type, business_id, business_code, operation_date, operation_user_id, operation_user_name, operation_content ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )
08-02  10:31:09.510  INFO  -||- [com.alibaba.nacos.client.naming] [com.alibaba.nacos.naming.beat.sender] => [REGISTER-SERVICE] test registering service CC_GROUP@@chenfan-cloud-finance with instance: {"clusterName":"DEFAULT","enabled":true,"ephemeral":true,"healthy":true,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000,"ip":"10.228.84.57","ipDeleteTimeout":30000,"metadata":{"preserved.register.source":"SPRING_CLOUD"},"port":8092,"serviceName":"CC_GROUP@@chenfan-cloud-finance","weight":1.0}
08-02  10:31:09.511  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-5] => ==> Parameters: 1422022126455676930(Long), 3(Integer), 201(Integer), 2448(Long), CRG210726000016(String), 2021-08-02T10:31:09.497(LocalDateTime), 1336971001799380993(Long), 奇美拉(String), 123123123(String)
08-02  10:31:09.514  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-5] => <==    Updates: 1
08-02  10:31:09.515  INFO  -|q2URvqgQUvMyNjAz|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-5] =>     [sql]: ==> INSERT INTO cf_bs_operation_log ( id, operation_type, business_type, business_id, business_code, operation_date, operation_user_id, operation_user_name, operation_content ) VALUES ( 1422022126455676930, 3, 201, 2448, 'CRG210726000016', '2021-08-02 10:31:09.497', 1336971001799380993, '奇美拉', '123123123' ) <==   |   [time]: ==> 12 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:31:11.415  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-5] => ==>  Preparing: UPDATE cf_bank_and_cash SET bank_and_cash_status=?, update_date=? WHERE bank_and_cash_id=?
08-02  10:31:11.418  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-5] => ==> Parameters: 2(Integer), 2021-08-02 10:30:29.156(Timestamp), 2448(Long)
08-02  10:31:11.421  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-5] => <==    Updates: 1
08-02  10:31:11.422  INFO  -|q2URvqgQUvMyNjAz|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-5] =>     [sql]: ==> UPDATE cf_bank_and_cash SET bank_and_cash_status=2, update_date='2021-08-02 10:30:29.156' WHERE bank_and_cash_id=2448 <==   |   [time]: ==> 5 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:31:12.286  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfClearHeaderMapper.updateById] [http-nio-8092-exec-5] => ==>  Preparing: UPDATE cf_clear_header SET clear_no=?, invoice_no=?, clear_method=?, clear_status=?, job_type=?, actual_ar_ap_date=?, brand_id=?, balance=?, fi_user=?, bank=?, bank_no=?, bank_amount=?, check_no=?, currency_code=?, exchange_rate=?, clear_by=?, clear_debit=?, clear_credit=?, clear_type=?, clear_balance=?, now_clear_debit=?, now_clear_credit=?, now_clear_type=?, now_clear_balance=?, last_balance_debit=?, last_balance_credit=?, last_balance_type=?, last_balance_balance=?, now_balance_debit=?, now_balance_credit=?, now_balance_type=?, now_balance_balance=?, remark=?, company_id=?, create_by=?, create_name=?, create_date=?, update_by=?, update_name=?, update_date=?, record_seq_no=?, receipt_screenshot=?, collection_and_pay_remark=?, reject_reason=? WHERE clear_id=?
08-02  10:31:12.291  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfClearHeaderMapper.updateById] [http-nio-8092-exec-5] => ==> Parameters: CL2108020002(String), (String), (String), 1(Integer), 3(Integer), null, 106(Long), 三只松鼠(String), (String), (String), (String), 0(BigDecimal), (String), RMB(String), 1.0000(BigDecimal), 1357232643485208577(Long), 600.0000(BigDecimal), 0.0000(BigDecimal), AR(String), 600.0000(BigDecimal), 1.0000(BigDecimal), 0.0000(BigDecimal), AR(String), 1.0000(BigDecimal), 0.0000(BigDecimal), 0.0000(BigDecimal), (String), 1.0000(BigDecimal), 0.0000(BigDecimal), 0.0000(BigDecimal), (String), 0.0000(BigDecimal), 123(String), 1(Long), 1357232643485208577(Long), 谢瑞(String), 2021-08-02T10:05:55(LocalDateTime), 1357232643485208577(Long), 谢瑞(String), 2021-08-02T10:31:11.423(LocalDateTime), CRG210726000016(String), (String), [{"fileName":"WLXT_需求规格说明书_首页案例.pdf","id":"6845659adb3a449c8ee0d84aaac009b6.pdf"}](String), null, 14867(Long)
08-02  10:31:12.294  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfClearHeaderMapper.updateById] [http-nio-8092-exec-5] => <==    Updates: 1
08-02  10:31:12.294  INFO  -|q2URvqgQUvMyNjAz|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-5] =>     [sql]: ==> UPDATE cf_clear_header SET clear_no='CL2108020002', invoice_no='', clear_method='', clear_status=1, job_type=3, actual_ar_ap_date=null, brand_id=106, balance='三只松鼠', fi_user='', bank='', bank_no='', bank_amount=0, check_no='', currency_code='RMB', exchange_rate=1.0000, clear_by=1357232643485208577, clear_debit=600.0000, clear_credit=0.0000, clear_type='AR', clear_balance=600.0000, now_clear_debit=1.0000, now_clear_credit=0.0000, now_clear_type='AR', now_clear_balance=1.0000, last_balance_debit=0.0000, last_balance_credit=0.0000, last_balance_type='', last_balance_balance=1.0000, now_balance_debit=0.0000, now_balance_credit=0.0000, now_balance_type='', now_balance_balance=0.0000, remark='123', company_id=1, create_by=1357232643485208577, create_name='谢瑞', create_date='2021-08-02 10:05:55.0', update_by=1357232643485208577, update_name='谢瑞', update_date='2021-08-02 10:31:11.423', record_seq_no='CRG210726000016', receipt_screenshot='', collection_and_pay_remark='[{"fileName":"WLXT_需求规格说明书_首页案例.pdf","id":"6845659adb3a449c8ee0d84aaac009b6.pdf"}]', reject_reason=null WHERE clear_id=14867 <==   |   [time]: ==> 5 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:31:12.735  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-5] => ==>  Preparing: INSERT INTO cf_bs_operation_log ( id, operation_type, business_type, business_id, business_code, operation_date, operation_user_id, operation_user_name ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )
08-02  10:31:12.738  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-5] => ==> Parameters: 1422022140028444673(Long), 7(Integer), 204(Integer), 14867(Long), CL2108020002(String), 2021-08-02T10:31:12.733(LocalDateTime), 1336971001799380993(Long), 奇美拉(String)
08-02  10:31:12.740  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-5] => <==    Updates: 1
08-02  10:31:12.741  INFO  -|q2URvqgQUvMyNjAz|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-5] =>     [sql]: ==> INSERT INTO cf_bs_operation_log ( id, operation_type, business_type, business_id, business_code, operation_date, operation_user_id, operation_user_name ) VALUES ( 1422022140028444673, 7, 204, 14867, 'CL2108020002', '2021-08-02 10:31:12.733', 1336971001799380993, '奇美拉' ) <==   |   [time]: ==> 5 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:31:12.866  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-5] => ==>  Preparing: SELECT clear_id,clear_no,invoice_no,clear_method,clear_status,job_type,actual_ar_ap_date,brand_id,balance,fi_user,bank,bank_no,bank_amount,check_no,currency_code,exchange_rate,clear_date,clear_by,clear_debit,clear_credit,clear_type,clear_balance,now_clear_debit,now_clear_credit,now_clear_type,now_clear_balance,last_balance_debit,last_balance_credit,last_balance_type,last_balance_balance,now_balance_debit,now_balance_credit,now_balance_type,now_balance_balance,remark,company_id,create_by,create_name,create_date,update_by,update_name,update_date,record_seq_no,receipt_screenshot,collection_and_pay_remark,reject_reason FROM cf_clear_header WHERE clear_id=?
08-02  10:31:12.868  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-5] => ==> Parameters: 14867(Long)
08-02  10:31:12.873  DEBUG -|q2URvqgQUvMyNjAz|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-5] => <==      Total: 1
08-02  10:31:12.874  INFO  -|q2URvqgQUvMyNjAz|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-5] =>     [sql]: ==> select * from cf_clear_header where clear_id=14867  <==   |   [time]: ==> 7 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfClearHeader(clear ...  <==
08-02  10:31:12.880  INFO  -|q2URvqgQUvMyNjAz|- [HTTP_LOG] [http-nio-8092-exec-5] => RequestParams:     3346004138000={    "approvalId": 1422017277095575552,    "serviceName": "chenfan-cloud-finance",    "param": "{\"json\": \"{\\\"clearId\\\":14867,\\\"clearStatus\\\":3,\\\"updateDate\\\":\\\"2021-08-02T10:11:53.302\\\"}\", \"className\": \"CfClearHeader\"}",    "approvalFlag": false,    "approvalFinished": true,    "remark": "123123123"}
08-02  10:31:12.880  INFO  -|q2URvqgQUvMyNjAz|- [HTTP_LOG] [http-nio-8092-exec-5] => Total:             72579ms
08-02  10:31:12.880  INFO  -|q2URvqgQUvMyNjAz|- [HTTP_LOG] [http-nio-8092-exec-5] =>                           //                      
08-02  10:31:12.880  INFO  -|q2URvqgQUvMyNjAz|- [HTTP_LOG] [http-nio-8092-exec-5] =>                          //                       
08-02  10:31:12.880  INFO  -|q2URvqgQUvMyNjAz|- [HTTP_LOG] [http-nio-8092-exec-5] => ========================//                        



08-02  10:31:21.110  INFO  -|q2URvqgQUvMyNjdC|- [HTTP_LOG] [http-nio-8092-exec-6] => ========================\\                      
08-02  10:31:21.110  INFO  -|q2URvqgQUvMyNjdC|- [HTTP_LOG] [http-nio-8092-exec-6] =>                          \\                     
08-02  10:31:21.110  INFO  -|q2URvqgQUvMyNjdC|- [HTTP_LOG] [http-nio-8092-exec-6] =>                           \\                    
08-02  10:31:21.110  INFO  -|q2URvqgQUvMyNjdC|- [HTTP_LOG] [http-nio-8092-exec-6] => RequestURI:        /callback
08-02  10:31:23.812  INFO  -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.controller.common.CallbackController] [http-nio-8092-exec-6] => callback-> {    "approvalId": 1422017277095575552,    "serviceName": "chenfan-cloud-finance",    "param": "{\"json\": \"{\\\"clearId\\\":14867,\\\"clearStatus\\\":3,\\\"updateDate\\\":\\\"2021-08-02T10:11:53.302\\\"}\", \"className\": \"CfClearHeader\"}",    "approvalFlag": false,    "approvalFinished": true,    "remark": "123123123"}
08-02  10:31:34.217  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-6] => ==>  Preparing: SELECT clear_id,clear_no,invoice_no,clear_method,clear_status,job_type,actual_ar_ap_date,brand_id,balance,fi_user,bank,bank_no,bank_amount,check_no,currency_code,exchange_rate,clear_date,clear_by,clear_debit,clear_credit,clear_type,clear_balance,now_clear_debit,now_clear_credit,now_clear_type,now_clear_balance,last_balance_debit,last_balance_credit,last_balance_type,last_balance_balance,now_balance_debit,now_balance_credit,now_balance_type,now_balance_balance,remark,company_id,create_by,create_name,create_date,update_by,update_name,update_date,record_seq_no,receipt_screenshot,collection_and_pay_remark,reject_reason FROM cf_clear_header WHERE clear_id=?
08-02  10:31:34.299  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-6] => ==> Parameters: 14867(Long)
08-02  10:31:34.329  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-6] => <==      Total: 1
08-02  10:31:34.334  INFO  -|q2URvqgQUvMyNjdC|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-6] =>     [sql]: ==> select * from cf_clear_header where clear_id=14867  <==   |   [time]: ==> 110 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfClearHeader(clear ...  <==
08-02  10:31:39.071  INFO  -||- [com.alibaba.nacos.client.config.impl.ClientWorker] [com.alibaba.nacos.client.Worker.longPolling.fixed-10.228.81.30_3848-test] => get changedGroupKeys:[]
08-02  10:31:50.089  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfClearDetailMapper.selectList] [http-nio-8092-exec-6] => ==>  Preparing: SELECT clear_detail_id,clear_id,invoice_no,invoice_title,balance,balance_name,invoice_title_name,charge_type,charge_source_type,source_currency_code,source_exchange_rate,charge_id,arap_type,clear_debit,clear_credit,cleared_amount,last_balance,now_balance,actual_clear_amount,charge_source_code,remark,currency_code,exchange_rate FROM cf_clear_detail WHERE (clear_id = ?)
08-02  10:31:50.163  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfClearDetailMapper.selectList] [http-nio-8092-exec-6] => ==> Parameters: 14867(Long)
08-02  10:31:50.183  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfClearDetailMapper.selectList] [http-nio-8092-exec-6] => <==      Total: 1
08-02  10:31:50.186  INFO  -|q2URvqgQUvMyNjdC|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-6] =>     [sql]: ==> select * from cf_clear_detail where (clear_id = 14867) <==   |   [time]: ==> 93 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfClearDetail(clear ...  <==
08-02  10:31:51.064  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfChargeCommonMapper.selectById] [http-nio-8092-exec-6] => ==>  Preparing: SELECT charge_id,charge_code,charge_source_type,charge_type,check_status,arap_type,split_type,charge_source_code,charge_source_detail,currency_code,exchange_rate,tax_rate,charge_unit,charge_qty,price_pp,amount_pp,balance,finance_entity,charge_month_belong_to,tax_invoice_no,tax_invoice_date,invoice_no,invoice_title,invoice_title_name,invoice_date,clear_no,actual_amount,actual_date,actual_history_date,remark,charge_date,bill_source_type,invoice_entrance_date,sett_template,create_by,create_name,create_date,company_id,tenant_id,update_by,update_name,update_date,parent_id,split_id,invoice_form,invoice_type,invoice_content,invoice_remark,brand_id,overage FROM cf_charge_common WHERE charge_id=?
08-02  10:31:51.140  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfChargeCommonMapper.selectById] [http-nio-8092-exec-6] => ==> Parameters: 9616(Long)
08-02  10:31:51.172  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfChargeCommonMapper.selectById] [http-nio-8092-exec-6] => <==      Total: 1
08-02  10:31:51.177  INFO  -|q2URvqgQUvMyNjdC|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-6] =>     [sql]: ==> select * from cf_charge_common where charge_id=9616  <==   |   [time]: ==> 106 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfChargeCommon(char ...  <==
08-02  10:31:51.192  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfChargeCommonMapper.updateById] [http-nio-8092-exec-6] => ==>  Preparing: UPDATE cf_charge_common SET charge_code=?, charge_source_type=?, charge_type=?, check_status=?, arap_type=?, split_type=?, charge_source_code=?, charge_source_detail=?, currency_code=?, exchange_rate=?, tax_rate=?, charge_qty=?, price_pp=?, amount_pp=?, balance=?, finance_entity=?, tax_invoice_no=?, tax_invoice_date=?, invoice_no=?, invoice_title=?, invoice_title_name=?, invoice_date=?, clear_no=?, actual_amount=?, actual_date=?, bill_source_type=?, invoice_entrance_date=?, create_by=?, create_name=?, create_date=?, company_id=?, tenant_id=?, update_by=?, update_name=?, update_date=?, parent_id=?, split_id=?, invoice_form=?, invoice_type=?, invoice_content=?, invoice_remark=?, brand_id=?, overage=? WHERE charge_id=?
08-02  10:31:51.277  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfChargeCommonMapper.updateById] [http-nio-8092-exec-6] => ==> Parameters: CRG210727000012(String), 3(Integer), 3(Integer), 1(Integer), AR(String), 1(Integer), SR2107270015(String), SR2107270015(String), RMB(String), 1.0000(BigDecimal), 0.00(BigDecimal), 1(Integer), 600.0000(BigDecimal), 600.00(BigDecimal), 三只松鼠(String), 宁波宸帆网络技术有限公司(String), 123(String), 2021-07-27T00:00(LocalDateTime), FP202107270016(String), 三只松鼠(String), 三只松鼠(String), 2021-07-27T15:39:06(LocalDateTime), (String), 0.0000(BigDecimal), 2021-08-02T10:05:55(LocalDateTime), 4(Integer), 2021-07-27T15:28:33(LocalDateTime), 1355109855085465602(Long), 徐苡芮(String), 2021-07-27T15:29:08(LocalDateTime), 4(Long), 1(Long), 1347390028526915585(Long), 海洋(String), 2021-07-27T15:29:08(LocalDateTime), 9613(Long), 3(Integer), 1(Integer), (String), (String), (String), 106(Long), 600.0000(BigDecimal), 9616(Long)
08-02  10:31:51.281  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfChargeCommonMapper.updateById] [http-nio-8092-exec-6] => <==    Updates: 1
08-02  10:31:51.286  INFO  -|q2URvqgQUvMyNjdC|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-6] =>     [sql]: ==> UPDATE cf_charge_common SET charge_code='CRG210727000012', charge_source_type=3, charge_type=3, check_status=1, arap_type='AR', split_type=1, charge_source_code='SR2107270015', charge_source_detail='SR2107270015', currency_code='RMB', exchange_rate=1.0000, tax_rate=0.00, charge_qty=1, price_pp=600.0000, amount_pp=600.00, balance='三只松鼠', finance_entity='宁波宸帆网络技术有限公司', tax_invoice_no='123', tax_invoice_date='2021-07-27 00:00:00.0', invoice_no='FP202107270016', invoice_title='三只松鼠', invoice_title_name='三只松鼠', invoice_date='2021-07-27 15:39:06.0', clear_no='', actual_amount=0.0000, actual_date='2021-08-02 10:05:55.0', bill_source_type=4, invoice_entrance_date='2021-07-27 15:28:33.0', create_by=1355109855085465602, create_name='徐苡芮', create_date='2021-07-27 15:29:08.0', company_id=4, tenant_id=1, update_by=1347390028526915585, update_name='海洋', update_date='2021-07-27 15:29:08.0', parent_id=9613, split_id=3, invoice_form=1, invoice_type='', invoice_content='', invoice_remark='', brand_id=106, overage=600.0000 WHERE charge_id=9616 <==   |   [time]: ==> 81 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:31:51.295  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfClearDetailMapper.updateById] [http-nio-8092-exec-6] => ==>  Preparing: UPDATE cf_clear_detail SET clear_id=?, invoice_no=?, invoice_title=?, balance=?, balance_name=?, invoice_title_name=?, charge_type=?, charge_source_type=?, source_currency_code=?, source_exchange_rate=?, charge_id=?, arap_type=?, clear_debit=?, clear_credit=?, cleared_amount=?, last_balance=?, now_balance=?, actual_clear_amount=?, charge_source_code=?, remark=?, currency_code=?, exchange_rate=? WHERE clear_detail_id=?
08-02  10:31:51.375  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfClearDetailMapper.updateById] [http-nio-8092-exec-6] => ==> Parameters: 14867(Long), 123(String), 三只松鼠(String), 三只松鼠(String), (String), 三只松鼠(String), 3(String), 3(Integer), (String), 0.0000(BigDecimal), 9616(Long), AR(String), 600.0000(BigDecimal), 0.0000(BigDecimal), 600.0000(BigDecimal), 600.0000(BigDecimal), 0(BigDecimal), 1.0000(BigDecimal), SR2107270015(String), (String), RMB(String), 1.0000(BigDecimal), 36661(Long)
08-02  10:31:51.378  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfClearDetailMapper.updateById] [http-nio-8092-exec-6] => <==    Updates: 1
08-02  10:31:51.382  INFO  -|q2URvqgQUvMyNjdC|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-6] =>     [sql]: ==> UPDATE cf_clear_detail SET clear_id=14867, invoice_no='123', invoice_title='三只松鼠', balance='三只松鼠', balance_name='', invoice_title_name='三只松鼠', charge_type='3', charge_source_type=3, source_currency_code='', source_exchange_rate=0.0000, charge_id=9616, arap_type='AR', clear_debit=600.0000, clear_credit=0.0000, cleared_amount=600.0000, last_balance=600.0000, now_balance=0, actual_clear_amount=1.0000, charge_source_code='SR2107270015', remark='', currency_code='RMB', exchange_rate=1.0000 WHERE clear_detail_id=36661 <==   |   [time]: ==> 79 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:31:53.280  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfClearBankDetailMapper.selectList] [http-nio-8092-exec-6] => ==>  Preparing: SELECT clear_bank_detail_id,clear_id,bank_and_cash_id,record_seq_no,record_type,amount,balance_balance,last_balance,arap_type,arap_date,payment_branch,remark,create_date FROM cf_clear_bank_detail WHERE (clear_id = ?)
08-02  10:31:53.354  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfClearBankDetailMapper.selectList] [http-nio-8092-exec-6] => ==> Parameters: 14867(Long)
08-02  10:31:53.363  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfClearBankDetailMapper.selectList] [http-nio-8092-exec-6] => <==      Total: 1
08-02  10:31:53.366  INFO  -|q2URvqgQUvMyNjdC|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-6] =>     [sql]: ==> select * from cf_clear_bank_detail where (clear_id = 14867) <==   |   [time]: ==> 82 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfClearBankDetail(c ...  <==
08-02  10:31:55.158  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfClearBankDetailMapper.delete] [http-nio-8092-exec-6] => ==>  Preparing: DELETE FROM cf_clear_bank_detail WHERE (clear_id = ?)
08-02  10:31:55.231  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfClearBankDetailMapper.delete] [http-nio-8092-exec-6] => ==> Parameters: 14867(Long)
08-02  10:31:55.234  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfClearBankDetailMapper.delete] [http-nio-8092-exec-6] => <==    Updates: 1
08-02  10:31:55.236  INFO  -|q2URvqgQUvMyNjdC|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-6] =>     [sql]: ==> DELETE FROM cf_clear_bank_detail WHERE (clear_id = 14867) <==   |   [time]: ==> 74 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:32:05.424  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectBatchIds] [http-nio-8092-exec-6] => ==>  Preparing: SELECT bank_and_cash_id,record_seq_no,record_type,arap_type,arap_date,brand_id,bank_and_cash_status,balance,collection_unit,bank,bank_no,amount,balance_balance,check_date,clear_no,check_no,record_user,charges_remark,account_in_date,account_in_user,payment_branch,outgo_bank,outgo_bankno,outgo_confirm_user,remark,company_id,create_by,create_name,create_date,update_by,update_name,update_date,balance_name,source_code,pay_company,pay_company_id,pay_bank,pay_bank_no,pay_account_in_user,job_type FROM cf_bank_and_cash WHERE bank_and_cash_id IN ( ? )
08-02  10:32:05.498  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectBatchIds] [http-nio-8092-exec-6] => ==> Parameters: 2448(Long)
08-02  10:32:05.524  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectBatchIds] [http-nio-8092-exec-6] => <==      Total: 1
08-02  10:32:05.529  INFO  -|q2URvqgQUvMyNjdC|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-6] =>     [sql]: ==> select * from cf_bank_and_cash where bank_and_cash_id in ( 2448 ) <==   |   [time]: ==> 100 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfBankAndCash(bankA ...  <==
08-02  10:32:05.537  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-6] => ==>  Preparing: UPDATE cf_bank_and_cash SET balance_balance=?, clear_no=? WHERE bank_and_cash_id=?
08-02  10:32:05.610  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-6] => ==> Parameters: 1990.0000(BigDecimal), (String), 2448(Long)
08-02  10:32:05.614  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-6] => <==    Updates: 1
08-02  10:32:05.615  INFO  -|q2URvqgQUvMyNjdC|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-6] =>     [sql]: ==> UPDATE cf_bank_and_cash SET balance_balance=1990.0000, clear_no='' WHERE bank_and_cash_id=2448 <==   |   [time]: ==> 75 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:32:05.621  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectById] [http-nio-8092-exec-6] => ==>  Preparing: SELECT bank_and_cash_id,record_seq_no,record_type,arap_type,arap_date,brand_id,bank_and_cash_status,balance,collection_unit,bank,bank_no,amount,balance_balance,check_date,clear_no,check_no,record_user,charges_remark,account_in_date,account_in_user,payment_branch,outgo_bank,outgo_bankno,outgo_confirm_user,remark,company_id,create_by,create_name,create_date,update_by,update_name,update_date,balance_name,source_code,pay_company,pay_company_id,pay_bank,pay_bank_no,pay_account_in_user,job_type FROM cf_bank_and_cash WHERE bank_and_cash_id=?
08-02  10:32:05.698  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectById] [http-nio-8092-exec-6] => ==> Parameters: 2448(Long)
08-02  10:32:05.724  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectById] [http-nio-8092-exec-6] => <==      Total: 1
08-02  10:32:05.728  INFO  -|q2URvqgQUvMyNjdC|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-6] =>     [sql]: ==> select * from cf_bank_and_cash where bank_and_cash_id=2448  <==   |   [time]: ==> 101 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfBankAndCash(bankA ...  <==
08-02  10:32:09.184  INFO  -||- [com.alibaba.nacos.client.config.impl.ClientWorker] [com.alibaba.nacos.client.Worker.longPolling.fixed-10.228.81.30_3848-test] => get changedGroupKeys:[]
08-02  10:32:09.190  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-6] => ==>  Preparing: INSERT INTO cf_bs_operation_log ( id, operation_type, business_type, business_id, business_code, operation_date, operation_user_id, operation_user_name, operation_content ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )
08-02  10:32:09.194  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-6] => ==> Parameters: 1422022376826265602(Long), 3(Integer), 201(Integer), 2448(Long), CRG210726000016(String), 2021-08-02T10:32:09.189(LocalDateTime), 1336971001799380993(Long), 奇美拉(String), 123123123(String)
08-02  10:32:09.196  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-6] => <==    Updates: 1
08-02  10:32:09.197  INFO  -|q2URvqgQUvMyNjdC|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-6] =>     [sql]: ==> INSERT INTO cf_bs_operation_log ( id, operation_type, business_type, business_id, business_code, operation_date, operation_user_id, operation_user_name, operation_content ) VALUES ( 1422022376826265602, 3, 201, 2448, 'CRG210726000016', '2021-08-02 10:32:09.189', 1336971001799380993, '奇美拉', '123123123' ) <==   |   [time]: ==> 5 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:32:09.197  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-6] => ==>  Preparing: UPDATE cf_bank_and_cash SET bank_and_cash_status=?, update_date=? WHERE bank_and_cash_id=?
08-02  10:32:09.200  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-6] => ==> Parameters: 2(Integer), 2021-08-02 10:32:05.729(Timestamp), 2448(Long)
08-02  10:32:09.202  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-6] => <==    Updates: 1
08-02  10:32:09.202  INFO  -|q2URvqgQUvMyNjdC|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-6] =>     [sql]: ==> UPDATE cf_bank_and_cash SET bank_and_cash_status=2, update_date='2021-08-02 10:32:05.729' WHERE bank_and_cash_id=2448 <==   |   [time]: ==> 4 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:32:09.204  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfClearHeaderMapper.updateById] [http-nio-8092-exec-6] => ==>  Preparing: UPDATE cf_clear_header SET clear_no=?, invoice_no=?, clear_method=?, clear_status=?, job_type=?, actual_ar_ap_date=?, brand_id=?, balance=?, fi_user=?, bank=?, bank_no=?, bank_amount=?, check_no=?, currency_code=?, exchange_rate=?, clear_by=?, clear_debit=?, clear_credit=?, clear_type=?, clear_balance=?, now_clear_debit=?, now_clear_credit=?, now_clear_type=?, now_clear_balance=?, last_balance_debit=?, last_balance_credit=?, last_balance_type=?, last_balance_balance=?, now_balance_debit=?, now_balance_credit=?, now_balance_type=?, now_balance_balance=?, remark=?, company_id=?, create_by=?, create_name=?, create_date=?, update_by=?, update_name=?, update_date=?, record_seq_no=?, receipt_screenshot=?, collection_and_pay_remark=?, reject_reason=? WHERE clear_id=?
08-02  10:32:09.208  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfClearHeaderMapper.updateById] [http-nio-8092-exec-6] => ==> Parameters: CL2108020002(String), (String), (String), 1(Integer), 3(Integer), null, 106(Long), 三只松鼠(String), (String), (String), (String), 0(BigDecimal), (String), RMB(String), 1.0000(BigDecimal), 1357232643485208577(Long), 600.0000(BigDecimal), 0.0000(BigDecimal), AR(String), 600.0000(BigDecimal), 1.0000(BigDecimal), 0.0000(BigDecimal), AR(String), 1.0000(BigDecimal), 0.0000(BigDecimal), 0.0000(BigDecimal), (String), 1.0000(BigDecimal), 0.0000(BigDecimal), 0.0000(BigDecimal), (String), 0.0000(BigDecimal), 123(String), 1(Long), 1357232643485208577(Long), 谢瑞(String), 2021-08-02T10:05:55(LocalDateTime), 1357232643485208577(Long), 谢瑞(String), 2021-08-02T10:32:09.203(LocalDateTime), CRG210726000016(String), (String), [{"fileName":"WLXT_需求规格说明书_首页案例.pdf","id":"6845659adb3a449c8ee0d84aaac009b6.pdf"}](String), null, 14867(Long)
08-02  10:32:09.211  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfClearHeaderMapper.updateById] [http-nio-8092-exec-6] => <==    Updates: 1
08-02  10:32:09.211  INFO  -|q2URvqgQUvMyNjdC|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-6] =>     [sql]: ==> UPDATE cf_clear_header SET clear_no='CL2108020002', invoice_no='', clear_method='', clear_status=1, job_type=3, actual_ar_ap_date=null, brand_id=106, balance='三只松鼠', fi_user='', bank='', bank_no='', bank_amount=0, check_no='', currency_code='RMB', exchange_rate=1.0000, clear_by=1357232643485208577, clear_debit=600.0000, clear_credit=0.0000, clear_type='AR', clear_balance=600.0000, now_clear_debit=1.0000, now_clear_credit=0.0000, now_clear_type='AR', now_clear_balance=1.0000, last_balance_debit=0.0000, last_balance_credit=0.0000, last_balance_type='', last_balance_balance=1.0000, now_balance_debit=0.0000, now_balance_credit=0.0000, now_balance_type='', now_balance_balance=0.0000, remark='123', company_id=1, create_by=1357232643485208577, create_name='谢瑞', create_date='2021-08-02 10:05:55.0', update_by=1357232643485208577, update_name='谢瑞', update_date='2021-08-02 10:32:09.203', record_seq_no='CRG210726000016', receipt_screenshot='', collection_and_pay_remark='[{"fileName":"WLXT_需求规格说明书_首页案例.pdf","id":"6845659adb3a449c8ee0d84aaac009b6.pdf"}]', reject_reason=null WHERE clear_id=14867 <==   |   [time]: ==> 5 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:32:09.213  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-6] => ==>  Preparing: INSERT INTO cf_bs_operation_log ( id, operation_type, business_type, business_id, business_code, operation_date, operation_user_id, operation_user_name ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )
08-02  10:32:09.216  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-6] => ==> Parameters: 1422022376914345985(Long), 7(Integer), 204(Integer), 14867(Long), CL2108020002(String), 2021-08-02T10:32:09.212(LocalDateTime), 1336971001799380993(Long), 奇美拉(String)
08-02  10:32:09.218  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-6] => <==    Updates: 1
08-02  10:32:09.218  INFO  -|q2URvqgQUvMyNjdC|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-6] =>     [sql]: ==> INSERT INTO cf_bs_operation_log ( id, operation_type, business_type, business_id, business_code, operation_date, operation_user_id, operation_user_name ) VALUES ( 1422022376914345985, 7, 204, 14867, 'CL2108020002', '2021-08-02 10:32:09.212', 1336971001799380993, '奇美拉' ) <==   |   [time]: ==> 4 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:32:09.221  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-6] => ==>  Preparing: SELECT clear_id,clear_no,invoice_no,clear_method,clear_status,job_type,actual_ar_ap_date,brand_id,balance,fi_user,bank,bank_no,bank_amount,check_no,currency_code,exchange_rate,clear_date,clear_by,clear_debit,clear_credit,clear_type,clear_balance,now_clear_debit,now_clear_credit,now_clear_type,now_clear_balance,last_balance_debit,last_balance_credit,last_balance_type,last_balance_balance,now_balance_debit,now_balance_credit,now_balance_type,now_balance_balance,remark,company_id,create_by,create_name,create_date,update_by,update_name,update_date,record_seq_no,receipt_screenshot,collection_and_pay_remark,reject_reason FROM cf_clear_header WHERE clear_id=?
08-02  10:32:09.224  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-6] => ==> Parameters: 14867(Long)
08-02  10:32:09.227  DEBUG -|q2URvqgQUvMyNjdC|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-6] => <==      Total: 1
08-02  10:32:09.228  INFO  -|q2URvqgQUvMyNjdC|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-6] =>     [sql]: ==> select * from cf_clear_header where clear_id=14867  <==   |   [time]: ==> 5 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfClearHeader(clear ...  <==
08-02  10:32:09.232  INFO  -|q2URvqgQUvMyNjdC|- [HTTP_LOG] [http-nio-8092-exec-6] => RequestParams:     3426820377400={    "approvalId": 1422017277095575552,    "serviceName": "chenfan-cloud-finance",    "param": "{\"json\": \"{\\\"clearId\\\":14867,\\\"clearStatus\\\":3,\\\"updateDate\\\":\\\"2021-08-02T10:11:53.302\\\"}\", \"className\": \"CfClearHeader\"}",    "approvalFlag": false,    "approvalFinished": true,    "remark": "123123123"}
08-02  10:32:09.232  INFO  -|q2URvqgQUvMyNjdC|- [HTTP_LOG] [http-nio-8092-exec-6] => Total:             48122ms
08-02  10:32:09.233  INFO  -|q2URvqgQUvMyNjdC|- [HTTP_LOG] [http-nio-8092-exec-6] =>                           //                      
08-02  10:32:09.233  INFO  -|q2URvqgQUvMyNjdC|- [HTTP_LOG] [http-nio-8092-exec-6] =>                          //                       
08-02  10:32:09.233  INFO  -|q2URvqgQUvMyNjdC|- [HTTP_LOG] [http-nio-8092-exec-6] => ========================//                        



08-02  10:32:09.292  INFO  -||- [org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler] [SpringContextShutdownHook] => Shutting down ExecutorService 'sheduleClearMemory'
08-02  10:32:09.296  INFO  -||- [com.alibaba.cloud.nacos.registry.NacosServiceRegistry] [SpringContextShutdownHook] => De-registering from Nacos Server now...
08-02  10:32:09.296  INFO  -||- [com.alibaba.nacos.client.naming] [SpringContextShutdownHook] => [BEAT] removing beat: CC_GROUP@@chenfan-cloud-finance:10.228.84.57:8092 from beat map.
08-02  10:32:09.296  INFO  -||- [com.alibaba.nacos.client.naming] [SpringContextShutdownHook] => [DEREGISTER-SERVICE] test deregistering service CC_GROUP@@chenfan-cloud-finance with instance: {"clusterName":"DEFAULT","enabled":true,"ephemeral":true,"healthy":true,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000,"instanceIdGenerator":"simple","ip":"10.228.84.57","ipDeleteTimeout":30000,"metadata":{},"port":8092,"weight":1.0}
08-02  10:32:09.298  INFO  -||- [com.alibaba.cloud.nacos.registry.NacosServiceRegistry] [SpringContextShutdownHook] => De-registration finished.
08-02  10:32:09.302  INFO  -||- [com.xxl.job.core.server.EmbedServer] [Thread-85] => >>>>>>>>>>> xxl-job remoting server stop.
08-02  10:32:09.310  INFO  -||- [com.xxl.job.core.thread.ExecutorRegistryThread] [xxl-job, executor ExecutorRegistryThread] => >>>>>>>>>>> xxl-job registry-remove success, registryParam:RegistryParam{registryGroup='EXECUTOR', registryKey='chenfan-finance', registryValue='http://10.228.84.57:9999/'}, registryResult:ReturnT [code=200, msg=null, content=null]
08-02  10:32:09.310  INFO  -||- [com.xxl.job.core.thread.ExecutorRegistryThread] [xxl-job, executor ExecutorRegistryThread] => >>>>>>>>>>> xxl-job, executor registry thread destory.
08-02  10:32:09.310  INFO  -||- [com.xxl.job.core.server.EmbedServer] [SpringContextShutdownHook] => >>>>>>>>>>> xxl-job remoting server destroy success.
08-02  10:32:09.310  INFO  -||- [com.xxl.job.core.thread.TriggerCallbackThread] [xxl-job, executor TriggerCallbackThread] => >>>>>>>>>>> xxl-job, executor callback thread destory.
08-02  10:32:09.311  INFO  -||- [com.xxl.job.core.thread.TriggerCallbackThread] [Thread-84] => >>>>>>>>>>> xxl-job, executor retry callback thread destory.
08-02  10:32:09.311  INFO  -||- [org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler] [SpringContextShutdownHook] => Shutting down ExecutorService 'sheduleClearMemory'
08-02  10:32:09.325  INFO  -||- [RocketmqRemoting] [NettyClientSelector_1] => closeChannel: close the connection to remote address[10.228.81.30:10911] result: true
08-02  10:32:09.326  INFO  -||- [RocketmqRemoting] [NettyClientSelector_1] => closeChannel: close the connection to remote address[10.228.81.30:9876] result: true
08-02  10:32:09.327  INFO  -||- [RocketmqRemoting] [NettyClientSelector_1] => closeChannel: close the connection to remote address[10.228.81.30:10909] result: true
08-02  10:32:09.334  INFO  -||- [RocketmqRemoting] [NettyClientSelector_1] => closeChannel: close the connection to remote address[10.228.81.30:9876] result: true
08-02  10:32:09.334  INFO  -||- [RocketmqRemoting] [NettyClientSelector_1] => closeChannel: close the connection to remote address[10.228.81.30:10909] result: true
08-02  10:32:09.334  INFO  -||- [RocketmqRemoting] [NettyClientSelector_1] => closeChannel: close the connection to remote address[10.228.81.30:10911] result: true
08-02  10:32:09.339  INFO  -||- [org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean] [SpringContextShutdownHook] => Closing JPA EntityManagerFactory for persistence unit 'default'
08-02  10:32:09.341  INFO  -||- [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] [SpringContextShutdownHook] => dynamic-datasource start closing ....
08-02  10:32:09.343  INFO  -||- [com.alibaba.druid.pool.DruidDataSource] [SpringContextShutdownHook] => {dataSource-1} closing ...
08-02  10:32:09.348  INFO  -||- [com.alibaba.druid.pool.DruidDataSource] [SpringContextShutdownHook] => {dataSource-1} closed
08-02  10:32:09.348  INFO  -||- [com.alibaba.druid.pool.DruidDataSource] [SpringContextShutdownHook] => {dataSource-2} closing ...
08-02  10:32:09.349  INFO  -||- [com.alibaba.druid.pool.DruidDataSource] [SpringContextShutdownHook] => {dataSource-2} closed
08-02  10:32:09.349  INFO  -||- [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] [SpringContextShutdownHook] => dynamic-datasource all closed success,bye
08-02  10:34:24.301  INFO  -||- [com.alibaba.nacos.client.config.impl.LocalConfigInfoProcessor] [main] => LOCAL_SNAPSHOT_PATH:C:\Users\2797\nacos\config
08-02  10:34:24.325  INFO  -||- [com.alibaba.nacos.client.config.impl.Limiter] [main] => limitTime:5.0
08-02  10:34:24.338  WARN  -||- [com.alibaba.cloud.nacos.client.NacosPropertySourceBuilder] [main] => Ignore the empty nacos configuration and get it based on dataId[finance] & group[TEST_GROUP]
08-02  10:34:24.340  WARN  -||- [com.alibaba.cloud.nacos.client.NacosPropertySourceBuilder] [main] => Ignore the empty nacos configuration and get it based on dataId[finance.yaml] & group[TEST_GROUP]
08-02  10:34:24.342  INFO  -||- [com.alibaba.nacos.client.config.utils.JVMUtil] [main] => isMultiInstance:false
08-02  10:34:24.351  INFO  -||- [org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration] [main] => Located property source: [BootstrapPropertySource {name='bootstrapProperties-finance-test.yaml,TEST_GROUP'}, BootstrapPropertySource {name='bootstrapProperties-finance.yaml,TEST_GROUP'}, BootstrapPropertySource {name='bootstrapProperties-finance,TEST_GROUP'}]
08-02  10:34:24.402  INFO  -||- [com.chenfan.finance.FinanceApplication] [main] => The following profiles are active: test
08-02  10:34:25.652  WARN  -||- [org.springframework.boot.actuate.endpoint.EndpointId] [main] => Endpoint ID 'nacos-config' contains invalid characters, please migrate to a valid format.
08-02  10:34:25.656  WARN  -||- [org.springframework.boot.actuate.endpoint.EndpointId] [main] => Endpoint ID 'nacos-discovery' contains invalid characters, please migrate to a valid format.
08-02  10:34:25.913  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Multiple Spring Data modules found, entering strict repository configuration mode!
08-02  10:34:25.914  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Bootstrapping Spring Data JPA repositories in DEFAULT mode.
08-02  10:34:25.968  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Finished Spring Data repository scanning in 47ms. Found 0 JPA repository interfaces.
08-02  10:34:25.974  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Multiple Spring Data modules found, entering strict repository configuration mode!
08-02  10:34:25.974  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
08-02  10:34:26.003  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Finished Spring Data repository scanning in 28ms. Found 0 MongoDB repository interfaces.
08-02  10:34:26.013  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Multiple Spring Data modules found, entering strict repository configuration mode!
08-02  10:34:26.014  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Bootstrapping Spring Data Redis repositories in DEFAULT mode.
08-02  10:34:26.057  INFO  -||- [org.springframework.data.repository.config.RepositoryConfigurationDelegate] [main] => Finished Spring Data repository scanning in 22ms. Found 0 Redis repository interfaces.
08-02  10:34:26.112  WARN  -||- [org.springframework.boot.actuate.endpoint.EndpointId] [main] => Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
08-02  10:34:26.236  INFO  -||- [org.springframework.context.annotation.ConfigurationClassPostProcessor] [main] => Cannot enhance @Configuration bean definition 'com.chenfan.ccp.autoconfigure.GlobalMqMessageConfigure' since its singleton instance has been created too early. The typical cause is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor return type: Consider declaring such methods as 'static'.
08-02  10:34:26.317  INFO  -||- [org.springframework.cloud.context.scope.GenericScope] [main] => BeanFactory id=9c5c18c6-bf26-3693-9dd7-40930d53801d
08-02  10:34:26.355  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.finance.server.BaseInfoRemoteServer' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:34:26.356  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.finance.server.BaseRemoteServer' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:34:26.357  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.finance.server.McnRemoteServer' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:34:26.357  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.finance.server.PrivilegeUserServer' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:34:26.358  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.finance.server.PurchaseRemoteServer' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:34:26.359  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.finance.server.TaskRemoteServer' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:34:26.361  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.finance.server.VendorCenterServer' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:34:26.362  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.process.client.ProcessClient' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:34:26.363  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.chenfan.code.generate.CodeGenerateClient' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:34:26.493  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:34:26.594  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$f0e62f09] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:34:26.607  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:34:26.613  INFO  -||- [org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] [main] => Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
08-02  10:34:26.979  INFO  -||- [org.springframework.boot.web.embedded.tomcat.TomcatWebServer] [main] => Tomcat initialized with port(s): 8092 (http)
08-02  10:34:26.989  INFO  -||- [org.apache.catalina.core.StandardService] [main] => Starting service [Tomcat]
08-02  10:34:26.989  INFO  -||- [org.apache.catalina.core.StandardEngine] [main] => Starting Servlet engine: [Apache Tomcat/9.0.37]
08-02  10:34:27.135  INFO  -||- [org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]] [main] => Initializing Spring embedded WebApplicationContext
08-02  10:34:27.135  INFO  -||- [org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext] [main] => Root WebApplicationContext: initialization completed in 2709 ms
08-02  10:34:27.472  INFO  -||- [org.redisson.Version] [main] => Redisson 3.14.0
08-02  10:34:27.945  INFO  -||- [org.redisson.connection.pool.MasterPubSubConnectionPool] [redisson-netty-2-13] => 1 connections initialized for /10.228.81.233:6379
08-02  10:34:27.963  INFO  -||- [org.redisson.connection.pool.MasterConnectionPool] [redisson-netty-2-18] => 24 connections initialized for /10.228.81.233:6379
08-02  10:34:28.576  INFO  -||- [com.alibaba.druid.pool.DruidDataSource] [main] => {dataSource-1,defaultdb} inited
08-02  10:34:28.578  INFO  -||- [com.alibaba.druid.pool.DruidDataSource] [main] => {dataSource-2,tocdb} inited
08-02  10:34:28.579  INFO  -||- [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] [main] => dynamic-datasource - load a datasource named [defaultdb] success
08-02  10:34:28.579  INFO  -||- [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] [main] => dynamic-datasource - load a datasource named [tocdb] success
08-02  10:34:28.579  INFO  -||- [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] [main] => dynamic-datasource initial loaded [2] datasource,primary datasource named [defaultdb]
08-02  10:34:28.813  INFO  -||- [org.hibernate.jpa.internal.util.LogHelper] [main] => HHH000204: Processing PersistenceUnitInfo [name: default]
08-02  10:34:28.862  INFO  -||- [org.hibernate.Version] [main] => HHH000412: Hibernate ORM core version 5.4.18.Final
08-02  10:34:28.973  INFO  -||- [org.hibernate.annotations.common.Version] [main] => HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
08-02  10:34:29.086  INFO  -||- [org.hibernate.dialect.Dialect] [main] => HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
08-02  10:34:29.268  INFO  -||- [org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator] [main] => HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
08-02  10:34:29.277  INFO  -||- [org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean] [main] => Initialized JPA EntityManagerFactory for persistence unit 'default'
08-02  10:34:29.716  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.BrandU8Mapping".
08-02  10:34:29.751  WARN  -||- [com.baomidou.mybatisplus.core.injector.AbstractMethod] [main] => [com.chenfan.finance.dao.CfBankAndCashMapper.delete] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.Delete]
08-02  10:34:30.393  WARN  -||- [com.baomidou.mybatisplus.core.injector.AbstractMethod] [main] => [com.chenfan.finance.dao.RuleBillingDetailMapper.insert] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.Insert]
08-02  10:34:30.397  WARN  -||- [com.baomidou.mybatisplus.core.injector.AbstractMethod] [main] => [com.chenfan.finance.dao.RuleBillingDetailMapper.updateById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.UpdateById]
08-02  10:34:30.411  WARN  -||- [com.baomidou.mybatisplus.core.injector.AbstractMethod] [main] => [com.chenfan.finance.dao.RuleBillingHeaderMapper.insert] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.Insert]
08-02  10:34:30.416  WARN  -||- [com.baomidou.mybatisplus.core.injector.AbstractMethod] [main] => [com.chenfan.finance.dao.RuleBillingHeaderMapper.selectById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.SelectById]
08-02  10:34:30.431  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocAlipayOrigin".
08-02  10:34:30.478  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocApiRefund".
08-02  10:34:30.496  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocApiRefundOrder".
08-02  10:34:30.513  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocApiTrade".
08-02  10:34:30.537  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocApiTradeOrder".
08-02  10:34:30.577  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocSalesTrade".
08-02  10:34:30.606  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocSalesTradeOrder".
08-02  10:34:30.650  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocStockoutOrderDetail".
08-02  10:34:30.672  WARN  -||- [com.baomidou.mybatisplus.core.metadata.TableInfoHelper] [main] => Can not find table primary key in Class: "com.chenfan.finance.model.bo.TocStockoutOrder".
08-02  10:34:31.049  WARN  -||- [org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration] [main] => spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
08-02  10:34:34.138  INFO  -||- [com.alibaba.nacos.client.naming] [main] => initializer namespace from System Property :null
08-02  10:34:34.138  INFO  -||- [com.alibaba.nacos.client.naming] [main] => initializer namespace from System Environment :null
08-02  10:34:34.139  INFO  -||- [com.alibaba.nacos.client.naming] [main] => initializer namespace from System Property :null
08-02  10:34:34.259  INFO  -||- [org.mongodb.driver.cluster] [main] => Cluster created with settings {hosts=[10.228.86.202:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
08-02  10:34:34.736  INFO  -||- [org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver] [main] => Exposing 0 endpoint(s) beneath base path '/actuator'
08-02  10:34:35.009  INFO  -||- [org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler] [main] => Initializing ExecutorService 'sheduleClearMemory'
08-02  10:34:35.024  INFO  -||- [com.chenfan.finance.config.XxlJobConfig] [main] => >>>>>>>>>>> xxl-job config init.
08-02  10:34:35.125  WARN  -||- [com.netflix.config.sources.URLConfigurationSource] [main] => No URLs will be polled as dynamic configuration sources.
08-02  10:34:35.126  INFO  -||- [com.netflix.config.sources.URLConfigurationSource] [main] => To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
08-02  10:34:35.130  WARN  -||- [com.netflix.config.sources.URLConfigurationSource] [main] => No URLs will be polled as dynamic configuration sources.
08-02  10:34:35.130  INFO  -||- [com.netflix.config.sources.URLConfigurationSource] [main] => To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
08-02  10:34:35.317  INFO  -||- [org.mongodb.driver.cluster] [cluster-ClusterId{value='610759bafa00f7477c5ffac5', description='null'}-10.228.86.202:27017] => Exception in monitor thread while connecting to server 10.228.86.202:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:70)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:128)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitorRunnable.run(DefaultServerMonitor.java:117)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:81)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:162)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:64)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:79)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:65)
	... 3 common frames omitted
08-02  10:34:36.553  INFO  -||- [com.xxl.job.core.executor.XxlJobExecutor] [main] => >>>>>>>>>>> xxl-job register jobhandler success, name:monitoringTask, jobHandler:com.xxl.job.core.handler.impl.MethodJobHandler@7e798721[class com.chenfan.finance.job.FinanceJob#monitoringTask]
08-02  10:34:36.553  INFO  -||- [com.xxl.job.core.executor.XxlJobExecutor] [main] => >>>>>>>>>>> xxl-job register jobhandler success, name:tocDataMapping, jobHandler:com.xxl.job.core.handler.impl.MethodJobHandler@4b8f60fe[class com.chenfan.finance.job.FinanceJob#tocDataMapping]
08-02  10:34:36.553  INFO  -||- [com.xxl.job.core.executor.XxlJobExecutor] [main] => >>>>>>>>>>> xxl-job register jobhandler success, name:cfRdCalculateTaskJob, jobHandler:com.xxl.job.core.handler.impl.MethodJobHandler@7a615950[class com.chenfan.finance.job.FinanceJob#cfRdCalculateTaskJob]
08-02  10:34:36.909  INFO  -||- [com.xxl.job.core.server.EmbedServer] [Thread-85] => >>>>>>>>>>> xxl-job remoting server start success, nettype = class com.xxl.job.core.server.EmbedServer, port = 9999
08-02  10:34:38.403  INFO  -||- [org.springframework.boot.web.embedded.tomcat.TomcatWebServer] [main] => Tomcat started on port(s): 8092 (http) with context path ''
08-02  10:34:38.406  INFO  -||- [com.alibaba.nacos.client.naming] [main] => [BEAT] adding beat: {"cluster":"DEFAULT","ip":"10.228.84.57","metadata":{"preserved.register.source":"SPRING_CLOUD"},"period":5000,"port":8092,"scheduled":false,"serviceName":"CC_GROUP@@chenfan-cloud-finance","stopped":false,"weight":1.0} to beat map.
08-02  10:34:38.415  INFO  -||- [com.alibaba.nacos.client.naming] [main] => [REGISTER-SERVICE] test registering service CC_GROUP@@chenfan-cloud-finance with instance: {"clusterName":"DEFAULT","enabled":true,"ephemeral":true,"healthy":true,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000,"ip":"10.228.84.57","ipDeleteTimeout":30000,"metadata":{"preserved.register.source":"SPRING_CLOUD"},"port":8092,"weight":1.0}
08-02  10:34:38.422  INFO  -||- [com.alibaba.cloud.nacos.registry.NacosServiceRegistry] [main] => nacos registry, CC_GROUP chenfan-cloud-finance 10.228.84.57:8092 register finished
08-02  10:34:38.537  INFO  -||- [com.chenfan.finance.FinanceApplication] [main] => Started FinanceApplication in 15.339 seconds (JVM running for 17.075)
08-02  10:34:38.542  INFO  -||- [com.chenfan.finance.commons.base.FinanceProjectInitRunner] [main] => ====================== init start =======================
08-02  10:34:38.558  INFO  -||- [com.chenfan.finance.commons.base.FinanceProjectInitRunner] [main] =>  finance_project_key : 7ac8710d-c1f0-4a3f-bce6-af49979f66f8 
08-02  10:34:38.558  INFO  -||- [com.chenfan.finance.commons.base.FinanceProjectInitRunner] [main] => ====================== init end =======================
08-02  10:34:38.561  INFO  -||- [com.alibaba.nacos.client.config.impl.ClientWorker] [main] => [fixed-10.228.81.30_3848-test] [subscribe] finance-test.yaml+TEST_GROUP+test
08-02  10:34:38.562  INFO  -||- [com.alibaba.nacos.client.config.impl.CacheData] [main] => [fixed-10.228.81.30_3848-test] [add-listener] ok, tenant=test, dataId=finance-test.yaml, group=TEST_GROUP, cnt=1
08-02  10:34:38.562  INFO  -||- [com.alibaba.nacos.client.config.impl.ClientWorker] [main] => [fixed-10.228.81.30_3848-test] [subscribe] finance+TEST_GROUP+test
08-02  10:34:38.562  INFO  -||- [com.alibaba.nacos.client.config.impl.CacheData] [main] => [fixed-10.228.81.30_3848-test] [add-listener] ok, tenant=test, dataId=finance, group=TEST_GROUP, cnt=1
08-02  10:34:38.563  INFO  -||- [com.alibaba.nacos.client.config.impl.ClientWorker] [main] => [fixed-10.228.81.30_3848-test] [subscribe] finance.yaml+TEST_GROUP+test
08-02  10:34:38.563  INFO  -||- [com.alibaba.nacos.client.config.impl.CacheData] [main] => [fixed-10.228.81.30_3848-test] [add-listener] ok, tenant=test, dataId=finance.yaml, group=TEST_GROUP, cnt=1
08-02  10:34:38.565  INFO  -||- [com.chenfan.ccp.util.start.ApplicationContextUtil] [main] => ======================================================================================
08-02  10:34:38.565  INFO  -||- [com.chenfan.ccp.util.start.ApplicationContextUtil] [main] =>                                                                                       
08-02  10:34:38.565  INFO  -||- [com.chenfan.ccp.util.start.ApplicationContextUtil] [main] => ................................服务启动成功,端口为8092................................
08-02  10:34:38.565  INFO  -||- [com.chenfan.ccp.util.start.ApplicationContextUtil] [main] => ................................日志保存路径为: ./log/................................
08-02  10:34:38.565  INFO  -||- [com.chenfan.ccp.util.start.ApplicationContextUtil] [main] =>                                                                                       
08-02  10:34:38.565  INFO  -||- [com.chenfan.ccp.util.start.ApplicationContextUtil] [main] => ======================================================================================
08-02  10:34:38.568  INFO  -||- [com.alibaba.nacos.client.config.impl.ClientWorker] [com.alibaba.nacos.client.Worker.longPolling.fixed-10.228.81.30_3848-test] => get changedGroupKeys:[]
08-02  10:34:38.872  INFO  -||- [org.mongodb.driver.cluster] [RMI TCP Connection(4)-10.228.84.57] => Cluster description not yet available. Waiting for 30000 ms before timing out
08-02  10:34:38.873  INFO  -||- [org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]] [RMI TCP Connection(6)-10.228.84.57] => Initializing Spring DispatcherServlet 'dispatcherServlet'
08-02  10:34:38.873  INFO  -||- [org.springframework.web.servlet.DispatcherServlet] [RMI TCP Connection(6)-10.228.84.57] => Initializing Servlet 'dispatcherServlet'
08-02  10:34:38.891  INFO  -||- [org.springframework.web.servlet.DispatcherServlet] [RMI TCP Connection(6)-10.228.84.57] => Completed initialization in 18 ms
08-02  10:34:43.663  INFO  -|q2URvqgQUvMyNjvg|- [HTTP_LOG] [http-nio-8092-exec-1] => ========================\\                      
08-02  10:34:43.664  INFO  -|q2URvqgQUvMyNjvg|- [HTTP_LOG] [http-nio-8092-exec-1] =>                          \\                     
08-02  10:34:43.664  INFO  -|q2URvqgQUvMyNjvg|- [HTTP_LOG] [http-nio-8092-exec-1] =>                           \\                    
08-02  10:34:43.664  INFO  -|q2URvqgQUvMyNjvg|- [HTTP_LOG] [http-nio-8092-exec-1] => RequestURI:        /callback
08-02  10:34:45.816  INFO  -|q2URvqgQUvMyNjvg|- [com.chenfan.finance.controller.common.CallbackController] [http-nio-8092-exec-1] => callback-> {    "approvalId": 1422017277095575552,    "serviceName": "chenfan-cloud-finance",    "param": "{\"json\": \"{\\\"clearId\\\":14867,\\\"clearStatus\\\":3,\\\"updateDate\\\":\\\"2021-08-02T10:11:53.302\\\"}\", \"className\": \"CfClearHeader\"}",    "approvalFlag": false,    "approvalFinished": true,    "remark": "123123123"}
08-02  10:34:48.877  DEBUG -|q2URvqgQUvMyNjvg|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-1] => ==>  Preparing: SELECT clear_id,clear_no,invoice_no,clear_method,clear_status,job_type,actual_ar_ap_date,brand_id,balance,fi_user,bank,bank_no,bank_amount,check_no,currency_code,exchange_rate,clear_date,clear_by,clear_debit,clear_credit,clear_type,clear_balance,now_clear_debit,now_clear_credit,now_clear_type,now_clear_balance,last_balance_debit,last_balance_credit,last_balance_type,last_balance_balance,now_balance_debit,now_balance_credit,now_balance_type,now_balance_balance,remark,company_id,create_by,create_name,create_date,update_by,update_name,update_date,record_seq_no,receipt_screenshot,collection_and_pay_remark,reject_reason FROM cf_clear_header WHERE clear_id=?
08-02  10:34:48.935  DEBUG -|q2URvqgQUvMyNjvg|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-1] => ==> Parameters: 14867(Long)
08-02  10:34:48.949  DEBUG -|q2URvqgQUvMyNjvg|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-1] => <==      Total: 1
08-02  10:34:48.951  INFO  -|q2URvqgQUvMyNjvg|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-1] =>     [sql]: ==> select * from cf_clear_header where clear_id=14867  <==   |   [time]: ==> 28 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfClearHeader(clear ...  <==
08-02  10:34:48.962  ERROR -|q2URvqgQUvMyNjvg|- [com.chenfan.common.exception.GlobalDefaultExceptionHandler] [http-nio-8092-exec-1] => [[SystemState, BUSINESS_ERROR, 状态错误，非预期的状态]] {}: {}
com.chenfan.common.exception.BusinessException: 状态错误，非预期的状态
	at com.chenfan.finance.exception.FinanceBizState.<clinit>(FinanceBizState.java:18)
	at com.chenfan.finance.service.common.state.AbstractStateService.getInvoiceStatusEnumFromList(AbstractStateService.java:109)
	at com.chenfan.finance.service.common.state.AbstractStateService.getInvoiceStatusEnumFromList(AbstractStateService.java:64)
	at com.chenfan.finance.service.common.state.ClearStateService.judgeStatus(ClearStateService.java:135)
	at com.chenfan.finance.service.common.state.ClearStateService.updateState(ClearStateService.java:95)
	at com.chenfan.finance.service.common.state.ClearStateService$$FastClassBySpringCGLIB$$c3d03714.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.chenfan.finance.service.common.state.ClearStateService$$EnhancerBySpringCGLIB$$b5a3bf08.updateState(<generated>)
	at com.chenfan.finance.service.common.McnClearService.updateState(McnClearService.java:272)
	at com.chenfan.finance.service.common.McnClearService$$FastClassBySpringCGLIB$$3afda4c0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)
	at com.chenfan.finance.service.common.McnClearService$$EnhancerBySpringCGLIB$$e4f7f38c.updateState(<generated>)
	at com.chenfan.finance.controller.common.CallbackController.callback(CallbackController.java:148)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.chenfan.ccp.plug.log.config.NativeServlerFilter$CustomFilter.traceHttp(NativeServlerFilter.java:146)
	at com.chenfan.ccp.plug.log.config.NativeServlerFilter$CustomFilter.doFilter(NativeServlerFilter.java:202)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.session.web.http.SessionRepositoryFilter.doFilterInternal(SessionRepositoryFilter.java:141)
	at org.springframework.session.web.http.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:82)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
08-02  10:34:48.978  INFO  -|q2URvqgQUvMyNjvg|- [HTTP_LOG] [http-nio-8092-exec-1] => RequestParams:     3629465249400={    "approvalId": 1422017277095575552,    "serviceName": "chenfan-cloud-finance",    "param": "{\"json\": \"{\\\"clearId\\\":14867,\\\"clearStatus\\\":3,\\\"updateDate\\\":\\\"2021-08-02T10:11:53.302\\\"}\", \"className\": \"CfClearHeader\"}",    "approvalFlag": false,    "approvalFinished": true,    "remark": "123123123"}
08-02  10:34:48.979  INFO  -|q2URvqgQUvMyNjvg|- [HTTP_LOG] [http-nio-8092-exec-1] => Total:             5316ms
08-02  10:34:48.979  INFO  -|q2URvqgQUvMyNjvg|- [HTTP_LOG] [http-nio-8092-exec-1] =>                           //                      
08-02  10:34:48.979  INFO  -|q2URvqgQUvMyNjvg|- [HTTP_LOG] [http-nio-8092-exec-1] =>                          //                       
08-02  10:34:48.979  INFO  -|q2URvqgQUvMyNjvg|- [HTTP_LOG] [http-nio-8092-exec-1] => ========================//                        



08-02  10:35:00.623  INFO  -|q2URvqgQUvMyNjvc|- [HTTP_LOG] [http-nio-8092-exec-4] => ========================\\                      
08-02  10:35:00.624  INFO  -|q2URvqgQUvMyNjvc|- [HTTP_LOG] [http-nio-8092-exec-4] =>                          \\                     
08-02  10:35:00.624  INFO  -|q2URvqgQUvMyNjvc|- [HTTP_LOG] [http-nio-8092-exec-4] =>                           \\                    
08-02  10:35:00.624  INFO  -|q2URvqgQUvMyNjvc|- [HTTP_LOG] [http-nio-8092-exec-4] => RequestURI:        /callback
08-02  10:35:00.626  INFO  -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.controller.common.CallbackController] [http-nio-8092-exec-4] => callback-> {    "approvalId": 1422017277095575552,    "serviceName": "chenfan-cloud-finance",    "param": "{\"json\": \"{\\\"clearId\\\":14867,\\\"clearStatus\\\":3,\\\"updateDate\\\":\\\"2021-08-02T10:11:53.302\\\"}\", \"className\": \"CfClearHeader\"}",    "approvalFlag": false,    "approvalFinished": true,    "remark": "123123123"}
08-02  10:35:00.629  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-4] => ==>  Preparing: SELECT clear_id,clear_no,invoice_no,clear_method,clear_status,job_type,actual_ar_ap_date,brand_id,balance,fi_user,bank,bank_no,bank_amount,check_no,currency_code,exchange_rate,clear_date,clear_by,clear_debit,clear_credit,clear_type,clear_balance,now_clear_debit,now_clear_credit,now_clear_type,now_clear_balance,last_balance_debit,last_balance_credit,last_balance_type,last_balance_balance,now_balance_debit,now_balance_credit,now_balance_type,now_balance_balance,remark,company_id,create_by,create_name,create_date,update_by,update_name,update_date,record_seq_no,receipt_screenshot,collection_and_pay_remark,reject_reason FROM cf_clear_header WHERE clear_id=?
08-02  10:35:00.637  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-4] => ==> Parameters: 14867(Long)
08-02  10:35:00.640  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-4] => <==      Total: 1
08-02  10:35:00.641  INFO  -|q2URvqgQUvMyNjvc|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> select * from cf_clear_header where clear_id=14867  <==   |   [time]: ==> 11 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfClearHeader(clear ...  <==
08-02  10:35:00.687  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfClearDetailMapper.selectList] [http-nio-8092-exec-4] => ==>  Preparing: SELECT clear_detail_id,clear_id,invoice_no,invoice_title,balance,balance_name,invoice_title_name,charge_type,charge_source_type,source_currency_code,source_exchange_rate,charge_id,arap_type,clear_debit,clear_credit,cleared_amount,last_balance,now_balance,actual_clear_amount,charge_source_code,remark,currency_code,exchange_rate FROM cf_clear_detail WHERE (clear_id = ?)
08-02  10:35:00.690  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfClearDetailMapper.selectList] [http-nio-8092-exec-4] => ==> Parameters: 14867(Long)
08-02  10:35:00.698  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfClearDetailMapper.selectList] [http-nio-8092-exec-4] => <==      Total: 1
08-02  10:35:00.699  INFO  -|q2URvqgQUvMyNjvc|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> select * from cf_clear_detail where (clear_id = 14867) <==   |   [time]: ==> 10 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfClearDetail(clear ...  <==
08-02  10:35:00.701  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfChargeCommonMapper.selectById] [http-nio-8092-exec-4] => ==>  Preparing: SELECT charge_id,charge_code,charge_source_type,charge_type,check_status,arap_type,split_type,charge_source_code,charge_source_detail,currency_code,exchange_rate,tax_rate,charge_unit,charge_qty,price_pp,amount_pp,balance,finance_entity,charge_month_belong_to,tax_invoice_no,tax_invoice_date,invoice_no,invoice_title,invoice_title_name,invoice_date,clear_no,actual_amount,actual_date,actual_history_date,remark,charge_date,bill_source_type,invoice_entrance_date,sett_template,create_by,create_name,create_date,company_id,tenant_id,update_by,update_name,update_date,parent_id,split_id,invoice_form,invoice_type,invoice_content,invoice_remark,brand_id,overage FROM cf_charge_common WHERE charge_id=?
08-02  10:35:00.704  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfChargeCommonMapper.selectById] [http-nio-8092-exec-4] => ==> Parameters: 9616(Long)
08-02  10:35:00.708  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfChargeCommonMapper.selectById] [http-nio-8092-exec-4] => <==      Total: 1
08-02  10:35:00.709  INFO  -|q2URvqgQUvMyNjvc|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> select * from cf_charge_common where charge_id=9616  <==   |   [time]: ==> 6 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfChargeCommon(char ...  <==
08-02  10:35:00.731  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfChargeCommonMapper.updateById] [http-nio-8092-exec-4] => ==>  Preparing: UPDATE cf_charge_common SET charge_code=?, charge_source_type=?, charge_type=?, check_status=?, arap_type=?, split_type=?, charge_source_code=?, charge_source_detail=?, currency_code=?, exchange_rate=?, tax_rate=?, charge_qty=?, price_pp=?, amount_pp=?, balance=?, finance_entity=?, tax_invoice_no=?, tax_invoice_date=?, invoice_no=?, invoice_title=?, invoice_title_name=?, invoice_date=?, clear_no=?, actual_amount=?, actual_date=?, bill_source_type=?, invoice_entrance_date=?, create_by=?, create_name=?, create_date=?, company_id=?, tenant_id=?, update_by=?, update_name=?, update_date=?, parent_id=?, split_id=?, invoice_form=?, invoice_type=?, invoice_content=?, invoice_remark=?, brand_id=?, overage=? WHERE charge_id=?
08-02  10:35:00.742  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfChargeCommonMapper.updateById] [http-nio-8092-exec-4] => ==> Parameters: CRG210727000012(String), 3(Integer), 3(Integer), 1(Integer), AR(String), 1(Integer), SR2107270015(String), SR2107270015(String), RMB(String), 1.0000(BigDecimal), 0.00(BigDecimal), 1(Integer), 600.0000(BigDecimal), 600.00(BigDecimal), 三只松鼠(String), 宁波宸帆网络技术有限公司(String), 123(String), 2021-07-27T00:00(LocalDateTime), FP202107270016(String), 三只松鼠(String), 三只松鼠(String), 2021-07-27T15:39:06(LocalDateTime), (String), 0.0000(BigDecimal), 2021-08-02T10:05:55(LocalDateTime), 4(Integer), 2021-07-27T15:28:33(LocalDateTime), 1355109855085465602(Long), 徐苡芮(String), 2021-07-27T15:29:08(LocalDateTime), 4(Long), 1(Long), 1347390028526915585(Long), 海洋(String), 2021-07-27T15:29:08(LocalDateTime), 9613(Long), 3(Integer), 1(Integer), (String), (String), (String), 106(Long), 600.0000(BigDecimal), 9616(Long)
08-02  10:35:00.829  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfChargeCommonMapper.updateById] [http-nio-8092-exec-4] => <==    Updates: 1
08-02  10:35:00.829  INFO  -|q2URvqgQUvMyNjvc|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> UPDATE cf_charge_common SET charge_code='CRG210727000012', charge_source_type=3, charge_type=3, check_status=1, arap_type='AR', split_type=1, charge_source_code='SR2107270015', charge_source_detail='SR2107270015', currency_code='RMB', exchange_rate=1.0000, tax_rate=0.00, charge_qty=1, price_pp=600.0000, amount_pp=600.00, balance='三只松鼠', finance_entity='宁波宸帆网络技术有限公司', tax_invoice_no='123', tax_invoice_date='2021-07-27 00:00:00.0', invoice_no='FP202107270016', invoice_title='三只松鼠', invoice_title_name='三只松鼠', invoice_date='2021-07-27 15:39:06.0', clear_no='', actual_amount=0.0000, actual_date='2021-08-02 10:05:55.0', bill_source_type=4, invoice_entrance_date='2021-07-27 15:28:33.0', create_by=1355109855085465602, create_name='徐苡芮', create_date='2021-07-27 15:29:08.0', company_id=4, tenant_id=1, update_by=1347390028526915585, update_name='海洋', update_date='2021-07-27 15:29:08.0', parent_id=9613, split_id=3, invoice_form=1, invoice_type='', invoice_content='', invoice_remark='', brand_id=106, overage=600.0000 WHERE charge_id=9616 <==   |   [time]: ==> 88 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:35:00.833  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfClearDetailMapper.updateById] [http-nio-8092-exec-4] => ==>  Preparing: UPDATE cf_clear_detail SET clear_id=?, invoice_no=?, invoice_title=?, balance=?, balance_name=?, invoice_title_name=?, charge_type=?, charge_source_type=?, source_currency_code=?, source_exchange_rate=?, charge_id=?, arap_type=?, clear_debit=?, clear_credit=?, cleared_amount=?, last_balance=?, now_balance=?, actual_clear_amount=?, charge_source_code=?, remark=?, currency_code=?, exchange_rate=? WHERE clear_detail_id=?
08-02  10:35:00.837  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfClearDetailMapper.updateById] [http-nio-8092-exec-4] => ==> Parameters: 14867(Long), 123(String), 三只松鼠(String), 三只松鼠(String), (String), 三只松鼠(String), 3(String), 3(Integer), (String), 0.0000(BigDecimal), 9616(Long), AR(String), 600.0000(BigDecimal), 0.0000(BigDecimal), 600.0000(BigDecimal), 600.0000(BigDecimal), 0(BigDecimal), 1.0000(BigDecimal), SR2107270015(String), (String), RMB(String), 1.0000(BigDecimal), 36661(Long)
08-02  10:35:00.839  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfClearDetailMapper.updateById] [http-nio-8092-exec-4] => <==    Updates: 1
08-02  10:35:00.839  INFO  -|q2URvqgQUvMyNjvc|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> UPDATE cf_clear_detail SET clear_id=14867, invoice_no='123', invoice_title='三只松鼠', balance='三只松鼠', balance_name='', invoice_title_name='三只松鼠', charge_type='3', charge_source_type=3, source_currency_code='', source_exchange_rate=0.0000, charge_id=9616, arap_type='AR', clear_debit=600.0000, clear_credit=0.0000, cleared_amount=600.0000, last_balance=600.0000, now_balance=0, actual_clear_amount=1.0000, charge_source_code='SR2107270015', remark='', currency_code='RMB', exchange_rate=1.0000 WHERE clear_detail_id=36661 <==   |   [time]: ==> 4 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:35:00.841  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfClearBankDetailMapper.selectList] [http-nio-8092-exec-4] => ==>  Preparing: SELECT clear_bank_detail_id,clear_id,bank_and_cash_id,record_seq_no,record_type,amount,balance_balance,last_balance,arap_type,arap_date,payment_branch,remark,create_date FROM cf_clear_bank_detail WHERE (clear_id = ?)
08-02  10:35:00.844  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfClearBankDetailMapper.selectList] [http-nio-8092-exec-4] => ==> Parameters: 14867(Long)
08-02  10:35:00.847  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfClearBankDetailMapper.selectList] [http-nio-8092-exec-4] => <==      Total: 1
08-02  10:35:00.848  INFO  -|q2URvqgQUvMyNjvc|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> select * from cf_clear_bank_detail where (clear_id = 14867) <==   |   [time]: ==> 5 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfClearBankDetail(c ...  <==
08-02  10:35:00.850  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfClearBankDetailMapper.delete] [http-nio-8092-exec-4] => ==>  Preparing: DELETE FROM cf_clear_bank_detail WHERE (clear_id = ?)
08-02  10:35:00.854  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfClearBankDetailMapper.delete] [http-nio-8092-exec-4] => ==> Parameters: 14867(Long)
08-02  10:35:00.856  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfClearBankDetailMapper.delete] [http-nio-8092-exec-4] => <==    Updates: 1
08-02  10:35:00.857  INFO  -|q2URvqgQUvMyNjvc|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> DELETE FROM cf_clear_bank_detail WHERE (clear_id = 14867) <==   |   [time]: ==> 4 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:35:00.860  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectBatchIds] [http-nio-8092-exec-4] => ==>  Preparing: SELECT bank_and_cash_id,record_seq_no,record_type,arap_type,arap_date,brand_id,bank_and_cash_status,balance,collection_unit,bank,bank_no,amount,balance_balance,check_date,clear_no,check_no,record_user,charges_remark,account_in_date,account_in_user,payment_branch,outgo_bank,outgo_bankno,outgo_confirm_user,remark,company_id,create_by,create_name,create_date,update_by,update_name,update_date,balance_name,source_code,pay_company,pay_company_id,pay_bank,pay_bank_no,pay_account_in_user,job_type FROM cf_bank_and_cash WHERE bank_and_cash_id IN ( ? )
08-02  10:35:00.863  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectBatchIds] [http-nio-8092-exec-4] => ==> Parameters: 2448(Long)
08-02  10:35:00.867  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectBatchIds] [http-nio-8092-exec-4] => <==      Total: 1
08-02  10:35:00.868  INFO  -|q2URvqgQUvMyNjvc|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> select * from cf_bank_and_cash where bank_and_cash_id in ( 2448 ) <==   |   [time]: ==> 6 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfBankAndCash(bankA ...  <==
08-02  10:35:00.875  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-4] => ==>  Preparing: UPDATE cf_bank_and_cash SET balance_balance=?, clear_no=? WHERE bank_and_cash_id=?
08-02  10:35:00.878  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-4] => ==> Parameters: 1990.0000(BigDecimal), (String), 2448(Long)
08-02  10:35:00.892  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-4] => <==    Updates: 1
08-02  10:35:00.893  INFO  -|q2URvqgQUvMyNjvc|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> UPDATE cf_bank_and_cash SET balance_balance=1990.0000, clear_no='' WHERE bank_and_cash_id=2448 <==   |   [time]: ==> 16 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:35:00.896  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectById] [http-nio-8092-exec-4] => ==>  Preparing: SELECT bank_and_cash_id,record_seq_no,record_type,arap_type,arap_date,brand_id,bank_and_cash_status,balance,collection_unit,bank,bank_no,amount,balance_balance,check_date,clear_no,check_no,record_user,charges_remark,account_in_date,account_in_user,payment_branch,outgo_bank,outgo_bankno,outgo_confirm_user,remark,company_id,create_by,create_name,create_date,update_by,update_name,update_date,balance_name,source_code,pay_company,pay_company_id,pay_bank,pay_bank_no,pay_account_in_user,job_type FROM cf_bank_and_cash WHERE bank_and_cash_id=?
08-02  10:35:00.899  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectById] [http-nio-8092-exec-4] => ==> Parameters: 2448(Long)
08-02  10:35:00.902  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfBankAndCashMapper.selectById] [http-nio-8092-exec-4] => <==      Total: 1
08-02  10:35:00.903  INFO  -|q2URvqgQUvMyNjvc|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> select * from cf_bank_and_cash where bank_and_cash_id=2448  <==   |   [time]: ==> 5 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfBankAndCash(bankA ...  <==
08-02  10:35:00.911  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-4] => ==>  Preparing: INSERT INTO cf_bs_operation_log ( id, operation_type, business_type, business_id, business_code, operation_date, operation_user_id, operation_user_name, operation_content ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )
08-02  10:35:00.920  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-4] => ==> Parameters: 1422023097072103426(Long), 3(Integer), 201(Integer), 2448(Long), CRG210726000016(String), 2021-08-02T10:35:00.907(LocalDateTime), 1336971001799380993(Long), 奇美拉(String), 123123123(String)
08-02  10:35:00.922  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-4] => <==    Updates: 1
08-02  10:35:00.922  INFO  -|q2URvqgQUvMyNjvc|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> INSERT INTO cf_bs_operation_log ( id, operation_type, business_type, business_id, business_code, operation_date, operation_user_id, operation_user_name, operation_content ) VALUES ( 1422023097072103426, 3, 201, 2448, 'CRG210726000016', '2021-08-02 10:35:00.907', 1336971001799380993, '奇美拉', '123123123' ) <==   |   [time]: ==> 4 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:35:00.923  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-4] => ==>  Preparing: UPDATE cf_bank_and_cash SET bank_and_cash_status=?, update_date=? WHERE bank_and_cash_id=?
08-02  10:35:00.927  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-4] => ==> Parameters: 2(Integer), 2021-08-02 10:35:00.903(Timestamp), 2448(Long)
08-02  10:35:00.937  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfBankAndCashMapper.updateById] [http-nio-8092-exec-4] => <==    Updates: 1
08-02  10:35:00.937  INFO  -|q2URvqgQUvMyNjvc|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> UPDATE cf_bank_and_cash SET bank_and_cash_status=2, update_date='2021-08-02 10:35:00.903' WHERE bank_and_cash_id=2448 <==   |   [time]: ==> 12 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:35:00.943  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfClearHeaderMapper.updateById] [http-nio-8092-exec-4] => ==>  Preparing: UPDATE cf_clear_header SET clear_no=?, invoice_no=?, clear_method=?, clear_status=?, job_type=?, actual_ar_ap_date=?, brand_id=?, balance=?, fi_user=?, bank=?, bank_no=?, bank_amount=?, check_no=?, currency_code=?, exchange_rate=?, clear_by=?, clear_debit=?, clear_credit=?, clear_type=?, clear_balance=?, now_clear_debit=?, now_clear_credit=?, now_clear_type=?, now_clear_balance=?, last_balance_debit=?, last_balance_credit=?, last_balance_type=?, last_balance_balance=?, now_balance_debit=?, now_balance_credit=?, now_balance_type=?, now_balance_balance=?, remark=?, company_id=?, create_by=?, create_name=?, create_date=?, update_by=?, update_name=?, update_date=?, record_seq_no=?, receipt_screenshot=?, collection_and_pay_remark=?, reject_reason=? WHERE clear_id=?
08-02  10:35:00.947  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfClearHeaderMapper.updateById] [http-nio-8092-exec-4] => ==> Parameters: CL2108020002(String), (String), (String), 1(Integer), 3(Integer), null, 106(Long), 三只松鼠(String), (String), (String), (String), 0(BigDecimal), (String), RMB(String), 1.0000(BigDecimal), 1357232643485208577(Long), 600.0000(BigDecimal), 0.0000(BigDecimal), AR(String), 600.0000(BigDecimal), 1.0000(BigDecimal), 0.0000(BigDecimal), AR(String), 1.0000(BigDecimal), 0.0000(BigDecimal), 0.0000(BigDecimal), (String), 1.0000(BigDecimal), 0.0000(BigDecimal), 0.0000(BigDecimal), (String), 0.0000(BigDecimal), 123(String), 1(Long), 1357232643485208577(Long), 谢瑞(String), 2021-08-02T10:05:55(LocalDateTime), 1357232643485208577(Long), 谢瑞(String), 2021-08-02T10:35:00.938(LocalDateTime), CRG210726000016(String), (String), [{"fileName":"WLXT_需求规格说明书_首页案例.pdf","id":"6845659adb3a449c8ee0d84aaac009b6.pdf"}](String), 123123123(String), 14867(Long)
08-02  10:35:00.949  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfClearHeaderMapper.updateById] [http-nio-8092-exec-4] => <==    Updates: 1
08-02  10:35:00.950  INFO  -|q2URvqgQUvMyNjvc|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> UPDATE cf_clear_header SET clear_no='CL2108020002', invoice_no='', clear_method='', clear_status=1, job_type=3, actual_ar_ap_date=null, brand_id=106, balance='三只松鼠', fi_user='', bank='', bank_no='', bank_amount=0, check_no='', currency_code='RMB', exchange_rate=1.0000, clear_by=1357232643485208577, clear_debit=600.0000, clear_credit=0.0000, clear_type='AR', clear_balance=600.0000, now_clear_debit=1.0000, now_clear_credit=0.0000, now_clear_type='AR', now_clear_balance=1.0000, last_balance_debit=0.0000, last_balance_credit=0.0000, last_balance_type='', last_balance_balance=1.0000, now_balance_debit=0.0000, now_balance_credit=0.0000, now_balance_type='', now_balance_balance=0.0000, remark='123', company_id=1, create_by=1357232643485208577, create_name='谢瑞', create_date='2021-08-02 10:05:55.0', update_by=1357232643485208577, update_name='谢瑞', update_date='2021-08-02 10:35:00.938', record_seq_no='CRG210726000016', receipt_screenshot='', collection_and_pay_remark='[{"fileName":"WLXT_需求规格说明书_首页案例.pdf","id":"6845659adb3a449c8ee0d84aaac009b6.pdf"}]', reject_reason='123123123' WHERE clear_id=14867 <==   |   [time]: ==> 4 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:35:00.952  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-4] => ==>  Preparing: INSERT INTO cf_bs_operation_log ( id, operation_type, business_type, business_id, business_code, operation_date, operation_user_id, operation_user_name, operation_content ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )
08-02  10:35:00.955  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-4] => ==> Parameters: 1422023097244069889(Long), 7(Integer), 204(Integer), 14867(Long), CL2108020002(String), 2021-08-02T10:35:00.951(LocalDateTime), 1336971001799380993(Long), 奇美拉(String), 123123123(String)
08-02  10:35:00.957  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfBsOperationLogDao.insert] [http-nio-8092-exec-4] => <==    Updates: 1
08-02  10:35:00.957  INFO  -|q2URvqgQUvMyNjvc|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> INSERT INTO cf_bs_operation_log ( id, operation_type, business_type, business_id, business_code, operation_date, operation_user_id, operation_user_name, operation_content ) VALUES ( 1422023097244069889, 7, 204, 14867, 'CL2108020002', '2021-08-02 10:35:00.951', 1336971001799380993, '奇美拉', '123123123' ) <==   |   [time]: ==> 4 ms <==   |   [size]: ==> 0 <==   |   [result]: ==> 1  <==
08-02  10:35:00.963  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-4] => ==>  Preparing: SELECT clear_id,clear_no,invoice_no,clear_method,clear_status,job_type,actual_ar_ap_date,brand_id,balance,fi_user,bank,bank_no,bank_amount,check_no,currency_code,exchange_rate,clear_date,clear_by,clear_debit,clear_credit,clear_type,clear_balance,now_clear_debit,now_clear_credit,now_clear_type,now_clear_balance,last_balance_debit,last_balance_credit,last_balance_type,last_balance_balance,now_balance_debit,now_balance_credit,now_balance_type,now_balance_balance,remark,company_id,create_by,create_name,create_date,update_by,update_name,update_date,record_seq_no,receipt_screenshot,collection_and_pay_remark,reject_reason FROM cf_clear_header WHERE clear_id=?
08-02  10:35:00.972  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-4] => ==> Parameters: 14867(Long)
08-02  10:35:00.975  DEBUG -|q2URvqgQUvMyNjvc|- [com.chenfan.finance.dao.CfClearHeaderMapper.selectById] [http-nio-8092-exec-4] => <==      Total: 1
08-02  10:35:00.976  INFO  -|q2URvqgQUvMyNjvc|- [com.chenfan.ccp.plug.log.handler.DynamicDataSourceInterceptor] [http-nio-8092-exec-4] =>     [sql]: ==> select * from cf_clear_header where clear_id=14867  <==   |   [time]: ==> 11 ms <==   |   [size]: ==> 1 <==   |   [result]: ==> [CfClearHeader(clear ...  <==
08-02  10:35:01.140  INFO  -|q2URvqgQUvMyNjvc|- [HTTP_LOG] [http-nio-8092-exec-4] => RequestParams:     3646348316100={    "approvalId": 1422017277095575552,    "serviceName": "chenfan-cloud-finance",    "param": "{\"json\": \"{\\\"clearId\\\":14867,\\\"clearStatus\\\":3,\\\"updateDate\\\":\\\"2021-08-02T10:11:53.302\\\"}\", \"className\": \"CfClearHeader\"}",    "approvalFlag": false,    "approvalFinished": true,    "remark": "123123123"}
08-02  10:35:01.140  INFO  -|q2URvqgQUvMyNjvc|- [HTTP_LOG] [http-nio-8092-exec-4] => Total:             517ms
08-02  10:35:01.141  INFO  -|q2URvqgQUvMyNjvc|- [HTTP_LOG] [http-nio-8092-exec-4] =>                           //                      
08-02  10:35:01.141  INFO  -|q2URvqgQUvMyNjvc|- [HTTP_LOG] [http-nio-8092-exec-4] =>                          //                       
08-02  10:35:01.141  INFO  -|q2URvqgQUvMyNjvc|- [HTTP_LOG] [http-nio-8092-exec-4] => ========================//                        



08-02  10:35:08.268  INFO  -||- [com.alibaba.nacos.client.config.impl.ClientWorker] [com.alibaba.nacos.client.Worker.longPolling.fixed-10.228.81.30_3848-test] => get changedGroupKeys:[]
08-02  10:35:08.876  WARN  -||- [org.springframework.boot.actuate.mongo.MongoHealthIndicator] [RMI TCP Connection(4)-10.228.84.57] => MongoDB health check failed
org.springframework.dao.DataAccessResourceFailureException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=10.228.86.202:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused: connect}}]; nested exception is com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=10.228.86.202:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused: connect}}]
	at org.springframework.data.mongodb.core.MongoExceptionTranslator.translateExceptionIfPossible(MongoExceptionTranslator.java:90)
	at org.springframework.data.mongodb.core.MongoTemplate.potentiallyConvertRuntimeException(MongoTemplate.java:2902)
	at org.springframework.data.mongodb.core.MongoTemplate.execute(MongoTemplate.java:560)
	at org.springframework.data.mongodb.core.MongoTemplate.executeCommand(MongoTemplate.java:476)
	at org.springframework.boot.actuate.mongo.MongoHealthIndicator.doHealthCheck(MongoHealthIndicator.java:46)
	at org.springframework.boot.actuate.health.AbstractHealthIndicator.health(AbstractHealthIndicator.java:82)
	at org.springframework.boot.actuate.health.HealthIndicator.getHealth(HealthIndicator.java:37)
	at org.springframework.boot.actuate.health.HealthEndpoint.getHealth(HealthEndpoint.java:81)
	at org.springframework.boot.actuate.health.HealthEndpoint.getHealth(HealthEndpoint.java:38)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getContribution(HealthEndpointSupport.java:108)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getAggregateHealth(HealthEndpointSupport.java:119)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getContribution(HealthEndpointSupport.java:105)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getHealth(HealthEndpointSupport.java:83)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getHealth(HealthEndpointSupport.java:70)
	at org.springframework.boot.actuate.health.HealthEndpoint.health(HealthEndpoint.java:75)
	at org.springframework.boot.actuate.health.HealthEndpoint.health(HealthEndpoint.java:65)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:282)
	at org.springframework.boot.actuate.endpoint.invoke.reflect.ReflectiveOperationInvoker.invoke(ReflectiveOperationInvoker.java:77)
	at org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredOperation.invoke(AbstractDiscoveredOperation.java:60)
	at org.springframework.boot.actuate.endpoint.jmx.EndpointMBean.invoke(EndpointMBean.java:121)
	at org.springframework.boot.actuate.endpoint.jmx.EndpointMBean.invoke(EndpointMBean.java:96)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)
	at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1468)
	at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:76)
	at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1309)
	at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1401)
	at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:829)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:357)
	at sun.rmi.transport.Transport$1.run(Transport.java:200)
	at sun.rmi.transport.Transport$1.run(Transport.java:197)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196)
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:573)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:834)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:688)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:687)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=10.228.86.202:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused: connect}}]
	at com.mongodb.internal.connection.BaseCluster.getDescription(BaseCluster.java:182)
	at com.mongodb.internal.connection.SingleServerCluster.getDescription(SingleServerCluster.java:41)
	at com.mongodb.client.internal.MongoClientDelegate.getConnectedClusterDescription(MongoClientDelegate.java:145)
	at com.mongodb.client.internal.MongoClientDelegate.createClientSession(MongoClientDelegate.java:100)
	at com.mongodb.client.internal.MongoClientDelegate$DelegateOperationExecutor.getClientSession(MongoClientDelegate.java:277)
	at com.mongodb.client.internal.MongoClientDelegate$DelegateOperationExecutor.execute(MongoClientDelegate.java:181)
	at com.mongodb.client.internal.MongoDatabaseImpl.executeCommand(MongoDatabaseImpl.java:186)
	at com.mongodb.client.internal.MongoDatabaseImpl.runCommand(MongoDatabaseImpl.java:155)
	at com.mongodb.client.internal.MongoDatabaseImpl.runCommand(MongoDatabaseImpl.java:150)
	at org.springframework.data.mongodb.core.MongoTemplate.lambda$executeCommand$2(MongoTemplate.java:476)
	at org.springframework.data.mongodb.core.MongoTemplate.execute(MongoTemplate.java:558)
	... 46 common frames omitted
08-02  10:35:14.022  INFO  -||- [org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler] [SpringContextShutdownHook] => Shutting down ExecutorService 'sheduleClearMemory'
08-02  10:35:14.026  INFO  -||- [com.alibaba.cloud.nacos.registry.NacosServiceRegistry] [SpringContextShutdownHook] => De-registering from Nacos Server now...
08-02  10:35:14.026  INFO  -||- [com.alibaba.nacos.client.naming] [SpringContextShutdownHook] => [BEAT] removing beat: CC_GROUP@@chenfan-cloud-finance:10.228.84.57:8092 from beat map.
08-02  10:35:14.026  INFO  -||- [com.alibaba.nacos.client.naming] [SpringContextShutdownHook] => [DEREGISTER-SERVICE] test deregistering service CC_GROUP@@chenfan-cloud-finance with instance: {"clusterName":"DEFAULT","enabled":true,"ephemeral":true,"healthy":true,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000,"instanceIdGenerator":"simple","ip":"10.228.84.57","ipDeleteTimeout":30000,"metadata":{},"port":8092,"weight":1.0}
08-02  10:35:14.028  INFO  -||- [com.alibaba.cloud.nacos.registry.NacosServiceRegistry] [SpringContextShutdownHook] => De-registration finished.
08-02  10:35:14.031  INFO  -||- [com.xxl.job.core.server.EmbedServer] [Thread-85] => >>>>>>>>>>> xxl-job remoting server stop.
08-02  10:35:14.039  INFO  -||- [com.xxl.job.core.thread.ExecutorRegistryThread] [xxl-job, executor ExecutorRegistryThread] => >>>>>>>>>>> xxl-job registry-remove success, registryParam:RegistryParam{registryGroup='EXECUTOR', registryKey='chenfan-finance', registryValue='http://10.228.84.57:9999/'}, registryResult:ReturnT [code=200, msg=null, content=null]
08-02  10:35:14.039  INFO  -||- [com.xxl.job.core.thread.ExecutorRegistryThread] [xxl-job, executor ExecutorRegistryThread] => >>>>>>>>>>> xxl-job, executor registry thread destory.
08-02  10:35:14.039  INFO  -||- [com.xxl.job.core.server.EmbedServer] [SpringContextShutdownHook] => >>>>>>>>>>> xxl-job remoting server destroy success.
08-02  10:35:14.039  INFO  -||- [com.xxl.job.core.thread.TriggerCallbackThread] [xxl-job, executor TriggerCallbackThread] => >>>>>>>>>>> xxl-job, executor callback thread destory.
08-02  10:35:14.040  INFO  -||- [com.xxl.job.core.thread.TriggerCallbackThread] [Thread-84] => >>>>>>>>>>> xxl-job, executor retry callback thread destory.
08-02  10:35:14.041  INFO  -||- [org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler] [SpringContextShutdownHook] => Shutting down ExecutorService 'sheduleClearMemory'
08-02  10:35:14.055  INFO  -||- [RocketmqRemoting] [NettyClientSelector_1] => closeChannel: close the connection to remote address[10.228.81.30:9876] result: true
08-02  10:35:14.055  INFO  -||- [RocketmqRemoting] [NettyClientSelector_1] => closeChannel: close the connection to remote address[10.228.81.30:10909] result: true
08-02  10:35:14.055  INFO  -||- [RocketmqRemoting] [NettyClientSelector_1] => closeChannel: close the connection to remote address[10.228.81.30:10911] result: true
08-02  10:35:14.061  INFO  -||- [RocketmqRemoting] [NettyClientSelector_1] => closeChannel: close the connection to remote address[10.228.81.30:9876] result: true
08-02  10:35:14.061  INFO  -||- [RocketmqRemoting] [NettyClientSelector_1] => closeChannel: close the connection to remote address[10.228.81.30:10909] result: true
08-02  10:35:14.061  INFO  -||- [RocketmqRemoting] [NettyClientSelector_1] => closeChannel: close the connection to remote address[10.228.81.30:10911] result: true
08-02  10:35:14.066  INFO  -||- [org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean] [SpringContextShutdownHook] => Closing JPA EntityManagerFactory for persistence unit 'default'
08-02  10:35:14.068  INFO  -||- [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] [SpringContextShutdownHook] => dynamic-datasource start closing ....
08-02  10:35:14.070  INFO  -||- [com.alibaba.druid.pool.DruidDataSource] [SpringContextShutdownHook] => {dataSource-1} closing ...
